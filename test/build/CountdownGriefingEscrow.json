{
	"schemaVersion": "2.0.0",
	"contractName": "CountdownGriefingEscrow",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [],
				"name": "Cancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "DataSubmitted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "DeadlineSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDeposit",
						"type": "uint256"
					}
				],
				"name": "DepositDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDeposit",
						"type": "uint256"
					}
				],
				"name": "DepositIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "agreement",
						"type": "address"
					}
				],
				"name": "Finalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakeAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "countdownLength",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "metadata",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "agreementParams",
						"type": "bytes"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "LengthSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "metadata",
						"type": "bytes"
					}
				],
				"name": "MetadataSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "OperatorUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "PaymentDeposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "StakeBurned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "StakeDeposited",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "cancel",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					}
				],
				"name": "depositAndSetBuyer",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					}
				],
				"name": "depositAndSetSeller",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "depositPayment",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "depositStake",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "finalize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getBuyer",
				"outputs": [
					{
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCountdownStatus",
				"outputs": [
					{
						"internalType": "enum Countdown.CountdownStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCreator",
				"outputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getData",
				"outputs": [
					{
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"internalType": "uint128",
						"name": "paymentAmount",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "stakeAmount",
						"type": "uint128"
					},
					{
						"internalType": "uint120",
						"name": "ratio",
						"type": "uint120"
					},
					{
						"internalType": "enum Griefing.RatioType",
						"name": "ratioType",
						"type": "uint8"
					},
					{
						"internalType": "uint128",
						"name": "countdownLength",
						"type": "uint128"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDeadline",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDeadlineStatus",
				"outputs": [
					{
						"internalType": "enum Deadline.DeadlineStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getDeposit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getEscrowStatus",
				"outputs": [
					{
						"internalType": "enum CountdownGriefingEscrow.EscrowStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "factory",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getOperator",
				"outputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getSeller",
				"outputs": [
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTimeRemaining",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "time",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					}
				],
				"name": "getTokenAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "enum TokenManager.Tokens",
						"name": "tokenID",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakeAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "escrowCountdown",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "metadata",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "agreementParams",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOperator",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "metadata",
						"type": "bytes"
					}
				],
				"name": "setMetadata",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "submitData",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "timeout",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "transferOperator",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50614968806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637fe07abf116100de578063dac6270d11610097578063e1254fba11610071578063e1254fba1461088c578063e7f43c68146108e4578063ea8a1af01461092e578063ee57e36f146109385761018e565b8063dac6270d146107f8578063dbd0e1b614610816578063de2229fe146108605761018e565b80637fe07abf146104a957806388cc58e4146104ed578063aa5e215314610537578063b7ac763f14610541578063be1c766b146105fc578063d53000041461061a5761018e565b80634bb278f31161014b578063603daf9a11610125578063603daf9a146103e55780636234216d1461042f578063665b0a191461045b57806370dea79a1461049f5761018e565b80634bb278f31461034c5780635ad3f918146103565780635f8d96de146103c75761018e565b80630d2d76a2146101935780630ee2cb101461019d57806319fbb48e146101e757806329605e77146102135780632ab6f8db146102575780633bc5de3014610261575b600080fd5b61019b6109f3565b005b6101a5610b50565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101ef610c31565b604051808260038111156101ff57fe5b60ff16815260200191505060405180910390f35b6102556004803603602081101561022957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610caa565b005b61025f610d31565b005b610269610db6565b6040518087600281111561027957fe5b60ff168152602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200183600281111561030957fe5b60ff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b610354610e89565b005b6103856004803603602081101561036c57600080fd5b81019080803560ff169060200190929190505050611a14565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103cf611a7b565b6040518082815260200191505060405180910390f35b6103ed611a84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610437611ab1565b6040518082600581111561044757fe5b60ff16815260200191505060405180910390f35b61049d6004803603602081101561047157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611acb565b005b6104a7611be1565b005b6104eb600480360360208110156104bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d00565b005b6104f5611e16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61053f611e40565b005b6105fa6004803603602081101561055757600080fd5b810190808035906020019064010000000081111561057457600080fd5b82018360208201111561058657600080fd5b803590602001918460018302840111640100000000831117156105a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f9d565b005b610604612141565b6040518082815260200191505060405180910390f35b6107f6600480360361012081101561063157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001906401000000008111156106d957600080fd5b8201836020820111156106eb57600080fd5b8035906020019184600183028401116401000000008311171561070d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561077057600080fd5b82018360208201111561078257600080fd5b803590602001918460018302840111640100000000831117156107a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061214b565b005b6108006129ab565b6040518082815260200191505060405180910390f35b61081e6129db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610868612a08565b6040518082600281111561087857fe5b60ff16815260200191505060405180910390f35b6108ce600480360360208110156108a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a38565b6040518082815260200191505060405180910390f35b6108ec612a5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610936612a87565b005b6109f16004803603602081101561094e57600080fd5b810190808035906020019064010000000081111561096b57600080fd5b82018360208201111561097d57600080fd5b8035906020019184600183028401116401000000008311171561099f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612ba7565b005b6109fc33612c2e565b80610a0c5750610a0b33612c6d565b5b610a7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c6572206e6f742079657420736574000000000000000000000000000081525060200191505060405180910390fd5b610b4e612cc7565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bf71982306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d6020811015610c1b57600080fd5b8101908080519060200190929190505050905090565b6000806001541415610c465760009050610ca7565b60006002811115610c5357fe5b610c5b612a08565b6002811115610c6657fe5b1415610c755760019050610ca7565b600280811115610c8157fe5b610c89612a08565b6002811115610c9457fe5b14610ca25760029050610ca7565b600390505b90565b610cb333612c6d565b610d25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610d2e81612eb2565b50565b610d3a33612c6d565b610dac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610db46130c1565b565b600080600080600080600560010160149054906101000a900460ff16600560020160009054906101000a90046fffffffffffffffffffffffffffffffff16600560020160109054906101000a90046fffffffffffffffffffffffffffffffff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff16955095509550955095509550909192939495565b610e9233612c2e565b80610ea25750610ea133612c6d565b5b610f14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b610f1c61322e565b610f8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206166746572206465706f736974000000000000000000000000000081525060200191505060405180910390fd5b600080610f99611e16565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a5e139046040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d602081101561100d57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166345bdfb1e846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561109f57600080fd5b505afa1580156110b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110dd57600080fd5b81019080805160405193929190846401000000008211156110fd57600080fd5b8382019150602082018581111561111357600080fd5b825186600182028301116401000000008211171561113057600080fd5b8083526020830192505050908051906020019080838360005b83811015611164578082015181840152602081019050611149565b50505050905090810190601f1680156111915780820380516001836020036101000a031916815260200191505b5060405250505080602001905160208110156111ac57600080fd5b8101908080519060200190929190505050905060608173ffffffffffffffffffffffffffffffffffffffff166354ed633b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120757600080fd5b505afa15801561121b573d6000803e3d6000fd5b505050506040513d602081101561123157600080fd5b810190808051906020019092919050505030600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560010160149054906101000a900460ff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405180602001604052806000815250604051602401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660028111156113dd57fe5b60ff1681526020018581526020018460028111156113f757fe5b60ff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611441578082015181840152602081019050611426565b50505050905090810190601f16801561146e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561154557808201518184015260208101905061152a565b50505050905090810190601f1680156115725780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561159157600080fd5b505af11580156115a5573d6000803e3d6000fd5b505050506040513d60208110156115bb57600080fd5b8101908080519060200190929190505050945050505050600080611616600560010160149054906101000a900460ff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613256565b9050600061165b600560010160149054906101000a900460ff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613256565b905061167081836132cd90919063ffffffff16565b9250505060008111156117065761169a600560010160149054906101000a900460ff168383613355565b8173ffffffffffffffffffffffffffffffffffffffff1663eedad66b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff16635e5365c16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561174e57600080fd5b505af1158015611762573d6000803e3d6000fd5b505050506040513d602081101561177857600080fd5b8101908080519060200190929190505050506000611794612a5d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611866578273ffffffffffffffffffffffffffffffffffffffff166329605e77826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b505050506118c7565b8273ffffffffffffffffffffffffffffffffffffffff16632ab6f8db6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118ae57600080fd5b505af11580156118c2573d6000803e3d6000fd5b505050505b6004600560030160006101000a81548160ff021916908360058111156118e957fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f8e500951de09bcc6854e88c0810bafb819503505895751e657a92df6578d3d9983604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6000600280811115611a2257fe5b826002811115611a2e57fe5b1415611a4357611a3c613790565b9050611a76565b60016002811115611a5057fe5b826002811115611a5c57fe5b1415611a7157611a6a6137ac565b9050611a76565b600090505b919050565b60008054905090565b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560030160009054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c657220616c726561647920736574000000000000000000000000000081525060200191505060405180910390fd5b80600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611bde612cc7565b50565b611bea336137c8565b80611bfa5750611bf933612c6d565b5b611c6c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b611c7461322e565b8015611c845750611c83613807565b5b611cf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6f6e6c7920616674657220636f756e74646f776e20656e64656400000000000081525060200191505060405180910390fd5b611cfe61382e565b565b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611dc7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f627579657220616c72656164792073657400000000000000000000000000000081525060200191505060405180910390fd5b80600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e136139ea565b50565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e49336137c8565b80611e595750611e5833612c6d565b5b611ecb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6275796572206e6f74207965742073657400000000000000000000000000000081525060200191505060405180910390fd5b611f9b6139ea565b565b611fa633612c2e565b80611fb65750611fb533612c6d565b5b612028576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b612030613bd6565b6120a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f6e6c792061667465722066696e616c697a656400000000000000000000000081525060200191505060405180910390fd5b7ffdf4f8571e6f770be30bc9e95e66f21bc368a871788c0b61c32628b1a8af1157816040518080602001828103825283818151815260200191508051906020019080838360005b838110156121045780820151818401526020810190506120e9565b50505050905090810190601f1680156121315780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600154905090565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000303b905060008163ffffffff16146121f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806148e8602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461226a5788600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146122e35787600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614612321576123208a613bfe565b5b61232a87613e0c565b61239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420746f6b656e0000000000000000000000000000000000000081525060200191505060405180910390fd5b86600560010160146101000a81548160ff021916908360028111156123bd57fe5b02179055506000861461248f57856fffffffffffffffffffffffffffffffff16861115612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7061796d656e74416d6f756e7420697320746f6f206c6172676500000000000081525060200191505060405180910390fd5b85600560020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6000851461255b57846fffffffffffffffffffffffffffffffff16851461251e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7374616b65416d6f756e7420697320746f6f206c61726765000000000000000081525060200191505060405180910390fd5b84600560020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b61256484613e4f565b60008351146125775761257683613e90565b5b60008251146127cc57600080600084806020019051606081101561259a57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050925092509250826effffffffffffffffffffffffffffff16831461264b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f726174696f206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b806fffffffffffffffffffffffffffffffff1681146126d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f61677265656d656e74436f756e74646f776e206f7574206f6620626f756e647381525060200191505060405180910390fd5b6040518060600160405280846effffffffffffffffffffffffffffff16815260200183600281111561270057fe5b8152602001826fffffffffffffffffffffffffffffffff16815250600560040160008201518160000160006101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550602082015181600001600f6101000a81548160ff0219169083600281111561278157fe5b021790555060408201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505050505b7f99880b4349a7b82fe6896e4e8328b90e92d300c30e31cbe61acddf287c77fdb48a8a8a8a8a8a8a8a8a604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187600281111561289c57fe5b60ff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156128f65780820151818401526020810190506128db565b50505050905090810190601f1680156129235780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561295c578082015181840152602081019050612941565b50505050905090810190601f1680156129895780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a150505050505050505050565b60004260005411156129d3576129cc42600054613f2f90919063ffffffff16565b90506129d8565b600090505b90565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000541415612a1d5760009050612a35565b426000541115612a305760019050612a35565b600290505b90565b6000612a56600560010160149054906101000a900460ff1683613f79565b9050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612a9033612c2e565b80612aa05750612a9f336137c8565b5b80612ab05750612aaf33612c6d565b5b612b22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6f6e6c792073656c6c6572206f72206275796572206f72206f70657261746f7281525060200191505060405180910390fd5b612b2a613fdf565b80612b395750612b38614006565b5b80612b485750612b4761402e565b5b612b9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149126022913960400191505060405180910390fd5b612ba561382e565b565b612bb033612c6d565b612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b612c2b81613e90565b50565b6000612c386129db565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b612ccf613fdf565b80612cde5750612cdd61402e565b5b612d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f63616e206f6e6c79206465706f736974207374616b65206f6e6365000000000081525060200191505060405180910390fd5b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114612dda57612dd8600560010160149054906101000a900460ff16833384614056565b505b7f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc28282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1612e4d61402e565b15612e86576003600560030160006101000a81548160ff02191690836005811115612e7457fe5b0217905550612e81610e89565b612eae565b6001600560030160006101000a81548160ff02191690836005811115612ea857fe5b02179055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561301a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec46000604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006003600581111561323d57fe5b613245611ab1565b600581111561325057fe5b14905090565b6000806002600085600281111561326957fe5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506132c284848361407c565b508091505092915050565b60008082840190508381101561334b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b8261335f81613e0c565b6133d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6002808111156133dd57fe5b8460028111156133e957fe5b141561352f576133f7613790565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561347d57600080fd5b505af1158015613491573d6000803e3d6000fd5b505050506040513d60208110156134a757600080fd5b810190808051906020019092919050505061352a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b61378a565b6001600281111561353c57fe5b84600281111561354857fe5b14156137895760006135586137ac565b905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561360d57600080fd5b505afa158015613621573d6000803e3d6000fd5b505050506040513d602081101561363757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff16639281cd658683876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b1580156136d957600080fd5b505af11580156136ed573d6000803e3d6000fd5b505050506040513d602081101561370357600080fd5b8101908080519060200190929190505050613786576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b50505b5b50505050565b6000736b175474e89094c44da98b954eedeac495271d0f905090565b6000731776e1f26f98b1a5df9cd347953a26dd3cb46671905090565b60006137d2611a84565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600060038081111561381557fe5b61381d610c31565b600381111561382857fe5b14905090565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560010160149054906101000a900460ff16905060006138a58285613f79565b146138b7576138b581848561425c565b505b60006138c38284613f79565b146138d5576138d381838461425c565b505b60058060030160006101000a81548160ff021916908360058111156138f657fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f63b958841f79ab97cb5456da181454b9932c0e15a3b17f1cbd27e2a8bc61043760405160405180910390a1505050565b6139f2613fdf565b80613a015750613a00614006565b5b613a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616e206f6e6c79206465706f736974207061796d656e74206f6e636500000081525060200191505060405180910390fd5b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114613afd57613afb600560010160149054906101000a900460ff16833384614056565b505b7fd348a8f42fae8db1d0030271b37ed6d94a5e292ff36db57b244ffe13f494dd458282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1613b70614006565b15613baa576003600560030160006101000a81548160ff02191690836005811115613b9757fe5b0217905550613ba4614283565b50613bd2565b6002600560030160006101000a81548160ff02191690836005811115613bcc57fe5b02179055505b5050565b600060046005811115613be557fe5b613bed611ab1565b6005811115613bf857fe5b14905090565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613cc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f70657261746f7220616c72656164792073657400000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613d65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600060016002811115613e1b57fe5b826002811115613e2757fe5b1480613e485750600280811115613e3a57fe5b826002811115613e4657fe5b145b9050919050565b806001819055507f7caceb1091bbaa84d09ab116a1fd72387eaab8a33d70fc39168b9b75686ee32c816040518082815260200191505060405180910390a150565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed816040518080602001828103825283818151815260200191508051906020019080838360005b83811015613ef2578082015181840152602081019050613ed7565b50505050905090810190601f168015613f1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000613f7183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506142ab565b905092915050565b600060026000846002811115613f8b57fe5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806005811115613fed57fe5b613ff5611ab1565b600581111561400057fe5b14905090565b60006001600581111561401557fe5b61401d611ab1565b600581111561402857fe5b14905090565b60006002600581111561403d57fe5b614045611ab1565b600581111561405057fe5b14905090565b600061406385858461436b565b9050614071858430856144d0565b809050949350505050565b6000806002600086600281111561408f57fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015614153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f696e73756666696369656e74206465706f73697420746f2072656d6f7665000081525060200191505060405180910390fd5b6141668382613f2f90919063ffffffff16565b9150816002600087600281111561417957fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f35785858585604051808560028111156141fd57fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1819150509392505050565b6000806142698585613f79565b9050614277858585846146c3565b50809150509392505050565b600061429a426001546132cd90919063ffffffff16565b90506142a5816146e8565b80905090565b6000838311158290614358576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561431d578082015181840152602081019050614302565b50505050905090810190601f16801561434a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60006143db826002600087600281111561438157fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132cd90919063ffffffff16565b905080600260008660028111156143ee57fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c848484846040518085600281111561447257fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a18090509392505050565b836144da81613e0c565b61454c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b61455585611a14565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561460f57600080fd5b505af1158015614623573d6000803e3d6000fd5b505050506040513d602081101561463957600080fd5b81019080805190602001909291905050506146bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505050565b60006146d085858461407c565b90506146dd858484614729565b809050949350505050565b806000819055507f337b880688eb06df8adb77036a6c8def1da2b520bc901c04b3a5a23f9ae13039816040518082815260200191505060405180910390a150565b8261473381613e0c565b6147a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6147ae84611a14565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561483457600080fd5b505af1158015614848573d6000803e3d6000fd5b505050506040513d602081101561485e57600080fd5b81019080805190602001909291905050506148e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505056fe6d7573742062652063616c6c65642077697468696e20636f6e747261637420636f6e7374727563746f726f6e6c79206265666f7265206465706f736974732061726520636f6d706c65746564a265627a7a723158207a0a387f2fc81ea4db937d0c3f7baa7ce2be415e6ab620d1ef2003b96fcd605864736f6c634300050d0032",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4968 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7FE07ABF GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xDAC6270D GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE1254FBA GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE1254FBA EQ PUSH2 0x88C JUMPI DUP1 PUSH4 0xE7F43C68 EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0xEA8A1AF0 EQ PUSH2 0x92E JUMPI DUP1 PUSH4 0xEE57E36F EQ PUSH2 0x938 JUMPI PUSH2 0x18E JUMP JUMPDEST DUP1 PUSH4 0xDAC6270D EQ PUSH2 0x7F8 JUMPI DUP1 PUSH4 0xDBD0E1B6 EQ PUSH2 0x816 JUMPI DUP1 PUSH4 0xDE2229FE EQ PUSH2 0x860 JUMPI PUSH2 0x18E JUMP JUMPDEST DUP1 PUSH4 0x7FE07ABF EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0x88CC58E4 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xAA5E2153 EQ PUSH2 0x537 JUMPI DUP1 PUSH4 0xB7AC763F EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xBE1C766B EQ PUSH2 0x5FC JUMPI DUP1 PUSH4 0xD5300004 EQ PUSH2 0x61A JUMPI PUSH2 0x18E JUMP JUMPDEST DUP1 PUSH4 0x4BB278F3 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x603DAF9A GT PUSH2 0x125 JUMPI DUP1 PUSH4 0x603DAF9A EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0x6234216D EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0x665B0A19 EQ PUSH2 0x45B JUMPI DUP1 PUSH4 0x70DEA79A EQ PUSH2 0x49F JUMPI PUSH2 0x18E JUMP JUMPDEST DUP1 PUSH4 0x4BB278F3 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x5AD3F918 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x5F8D96DE EQ PUSH2 0x3C7 JUMPI PUSH2 0x18E JUMP JUMPDEST DUP1 PUSH4 0xD2D76A2 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xEE2CB10 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x19FBB48E EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x2AB6F8DB EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x3BC5DE30 EQ PUSH2 0x261 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B PUSH2 0x9F3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A5 PUSH2 0xB50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EF PUSH2 0xC31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1FF JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x255 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCAA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25F PUSH2 0xD31 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x269 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP8 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x279 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x309 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x354 PUSH2 0xE89 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x385 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CF PUSH2 0x1A7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3ED PUSH2 0x1A84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x437 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x447 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x49D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1ACB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A7 PUSH2 0x1BE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4EB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D00 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F5 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH2 0x1E40 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5FA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x5A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x1F9D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x604 PUSH2 0x2141 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x6D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x7A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x214B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x800 PUSH2 0x29AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x81E PUSH2 0x29DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x868 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x878 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8EC PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x936 PUSH2 0x2A87 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x99F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2BA7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9FC CALLER PUSH2 0x2C2E JUMP JUMPDEST DUP1 PUSH2 0xA0C JUMPI POP PUSH2 0xA0B CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C792073656C6C6572206F72206F70657261746F72000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB46 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x73656C6C6572206E6F7420796574207365740000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB4E PUSH2 0x2CC7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6BF71982 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xC46 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xC53 JUMPI INVALID JUMPDEST PUSH2 0xC5B PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xC66 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xC75 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0xC81 JUMPI INVALID JUMPDEST PUSH2 0xC89 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xC94 JUMPI INVALID JUMPDEST EQ PUSH2 0xCA2 JUMPI PUSH1 0x2 SWAP1 POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x3 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCB3 CALLER PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0xD25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206F70657261746F7200000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD2E DUP2 PUSH2 0x2EB2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD3A CALLER PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0xDAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206F70657261746F7200000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB4 PUSH2 0x30C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0xF SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 JUMP JUMPDEST PUSH2 0xE92 CALLER PUSH2 0x2C2E JUMP JUMPDEST DUP1 PUSH2 0xEA2 JUMPI POP PUSH2 0xEA1 CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0xF14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C792073656C6C6572206F72206F70657261746F72000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF1C PUSH2 0x322E JUMP JUMPDEST PUSH2 0xF8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206166746572206465706F7369740000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF99 PUSH2 0x1E16 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA5E13904 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x100D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x45BDFB1E DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x109F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x10FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x1130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1164 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1149 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1191 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x60 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x54ED633B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x121B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ADDRESS PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0xF SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x13DD JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x13F7 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1441 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1426 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x146E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCF5BA53F DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1545 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x152A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1572 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP5 POP POP POP POP POP PUSH1 0x0 DUP1 PUSH2 0x1616 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3256 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x165B PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3256 JUMP JUMPDEST SWAP1 POP PUSH2 0x1670 DUP2 DUP4 PUSH2 0x32CD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1706 JUMPI PUSH2 0x169A PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 DUP4 PUSH2 0x3355 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEEDAD66B DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5E5365C1 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x174E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1762 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP PUSH1 0x0 PUSH2 0x1794 PUSH2 0x2A5D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1866 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x29605E77 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x185D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x18C7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2AB6F8DB PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x4 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x18E9 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0xF PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP PUSH32 0x8E500951DE09BCC6854E88C0810BAFB819503505895751E657A92DF6578D3D99 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x1A22 JUMPI INVALID JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1A2E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A43 JUMPI PUSH2 0x1A3C PUSH2 0x3790 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1A50 JUMPI INVALID JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1A5C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A71 JUMPI PUSH2 0x1A6A PUSH2 0x37AC JUMP JUMPDEST SWAP1 POP PUSH2 0x1A76 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B92 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x73656C6C657220616C7265616479207365740000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1BDE PUSH2 0x2CC7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1BEA CALLER PUSH2 0x37C8 JUMP JUMPDEST DUP1 PUSH2 0x1BFA JUMPI POP PUSH2 0x1BF9 CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0x1C6C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206275796572206F72206F70657261746F7200000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C74 PUSH2 0x322E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C84 JUMPI POP PUSH2 0x1C83 PUSH2 0x3807 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C7920616674657220636F756E74646F776E20656E646564000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CFE PUSH2 0x382E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1DC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x627579657220616C726561647920736574000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1E13 PUSH2 0x39EA JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1E49 CALLER PUSH2 0x37C8 JUMP JUMPDEST DUP1 PUSH2 0x1E59 JUMPI POP PUSH2 0x1E58 CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0x1ECB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206275796572206F72206F70657261746F7200000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1F93 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6275796572206E6F742079657420736574000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F9B PUSH2 0x39EA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1FA6 CALLER PUSH2 0x2C2E JUMP JUMPDEST DUP1 PUSH2 0x1FB6 JUMPI POP PUSH2 0x1FB5 CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0x2028 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C792073656C6C6572206F72206F70657261746F72000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2030 PUSH2 0x3BD6 JUMP JUMPDEST PUSH2 0x20A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C792061667465722066696E616C697A6564000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFDF4F8571E6F770BE30BC9E95E66F21BC368A871788C0B61C32628B1A8AF1157 DUP2 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2104 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x20E9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2131 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 ADDRESS EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND EQ PUSH2 0x21F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x48E8 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x226A JUMPI DUP9 PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x22E3 JUMPI DUP8 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2321 JUMPI PUSH2 0x2320 DUP11 PUSH2 0x3BFE JUMP JUMPDEST JUMPDEST PUSH2 0x232A DUP8 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x239C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420746F6B656E00000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x23BD JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP7 EQ PUSH2 0x248F JUMPI DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 GT ISZERO PUSH2 0x2452 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7061796D656E74416D6F756E7420697320746F6F206C61726765000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x255B JUMPI DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 EQ PUSH2 0x251E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7374616B65416D6F756E7420697320746F6F206C617267650000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x2564 DUP5 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD EQ PUSH2 0x2577 JUMPI PUSH2 0x2576 DUP4 PUSH2 0x3E90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 MLOAD EQ PUSH2 0x27CC JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 EQ PUSH2 0x264B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x726174696F206F7574206F6620626F756E647300000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 EQ PUSH2 0x26D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x61677265656D656E74436F756E74646F776E206F7574206F6620626F756E6473 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2700 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0xF PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2781 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP JUMPDEST PUSH32 0x99880B4349A7B82FE6896E4E8328B90E92D300C30E31CBE61ACDDF287C77FDB4 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x289C JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28F6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x28DB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2923 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x295C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2941 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2989 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x0 SLOAD GT ISZERO PUSH2 0x29D3 JUMPI PUSH2 0x29CC TIMESTAMP PUSH1 0x0 SLOAD PUSH2 0x3F2F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x29D8 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2A1D JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2A35 JUMP JUMPDEST TIMESTAMP PUSH1 0x0 SLOAD GT ISZERO PUSH2 0x2A30 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x2A35 JUMP JUMPDEST PUSH1 0x2 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A56 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 PUSH2 0x3F79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2A90 CALLER PUSH2 0x2C2E JUMP JUMPDEST DUP1 PUSH2 0x2AA0 JUMPI POP PUSH2 0x2A9F CALLER PUSH2 0x37C8 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2AB0 JUMPI POP PUSH2 0x2AAF CALLER PUSH2 0x2C6D JUMP JUMPDEST JUMPDEST PUSH2 0x2B22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C792073656C6C6572206F72206275796572206F72206F70657261746F72 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B2A PUSH2 0x3FDF JUMP JUMPDEST DUP1 PUSH2 0x2B39 JUMPI POP PUSH2 0x2B38 PUSH2 0x4006 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2B48 JUMPI POP PUSH2 0x2B47 PUSH2 0x402E JUMP JUMPDEST JUMPDEST PUSH2 0x2B9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4912 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BA5 PUSH2 0x382E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2BB0 CALLER PUSH2 0x2C6D JUMP JUMPDEST PUSH2 0x2C22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79206F70657261746F7200000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C2B DUP2 PUSH2 0x3E90 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C38 PUSH2 0x29DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CCF PUSH2 0x3FDF JUMP JUMPDEST DUP1 PUSH2 0x2CDE JUMPI POP PUSH2 0x2CDD PUSH2 0x402E JUMP JUMPDEST JUMPDEST PUSH2 0x2D50 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E206F6E6C79206465706F736974207374616B65206F6E63650000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x2DDA JUMPI PUSH2 0x2DD8 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 CALLER DUP5 PUSH2 0x4056 JUMP JUMPDEST POP JUMPDEST PUSH32 0xA7BB2E28CC4698AAC06DB79CF9163BFCC20719286CF59FA7D492CEDA1B8EDC2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x2E4D PUSH2 0x402E JUMP JUMPDEST ISZERO PUSH2 0x2E86 JUMPI PUSH1 0x3 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x2E74 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x2E81 PUSH2 0xE89 JUMP JUMPDEST PUSH2 0x2EAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x2EA8 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2F77 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79207768656E206F70657261746F722073657400000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x301A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F7420736574206F70657261746F7220746F20616464726573732030 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB3B3F5F64AB192E4B5FEFDE1F51CE9733BBDCF831951543B325AEBD49CC27EC4 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3186 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F6E6C79207768656E206F70657261746F722073657400000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB3B3F5F64AB192E4B5FEFDE1F51CE9733BBDCF831951543B325AEBD49CC27EC4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x323D JUMPI INVALID JUMPDEST PUSH2 0x3245 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3250 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3269 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x32C2 DUP5 DUP5 DUP4 PUSH2 0x407C JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x334B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH2 0x335F DUP2 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x33D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420746F6B656E49440000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x33DD JUMPI INVALID JUMPDEST DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x33E9 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x352F JUMPI PUSH2 0x33F7 PUSH2 0x3790 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x347D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3491 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x352A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6B656E20617070726F76616C206661696C65640000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x378A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x353C JUMPI INVALID JUMPDEST DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3548 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3789 JUMPI PUSH1 0x0 PUSH2 0x3558 PUSH2 0x37AC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E CALLER DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x360D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3621 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9281CD65 DUP7 DUP4 DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3786 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6B656E20617070726F76616C206661696C65640000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x1776E1F26F98B1A5DF9CD347953A26DD3CB46671 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D2 PUSH2 0x1A84 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x3815 JUMPI INVALID JUMPDEST PUSH2 0x381D PUSH2 0xC31 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3828 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x38A5 DUP3 DUP6 PUSH2 0x3F79 JUMP JUMPDEST EQ PUSH2 0x38B7 JUMPI PUSH2 0x38B5 DUP2 DUP5 DUP6 PUSH2 0x425C JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x38C3 DUP3 DUP5 PUSH2 0x3F79 JUMP JUMPDEST EQ PUSH2 0x38D5 JUMPI PUSH2 0x38D3 DUP2 DUP4 DUP5 PUSH2 0x425C JUMP JUMPDEST POP JUMPDEST PUSH1 0x5 DUP1 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x38F6 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x5 PUSH1 0x4 ADD PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0xF PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP PUSH32 0x63B958841F79AB97CB5456DA181454B9932C0E15A3B17F1CBD27E2A8BC610437 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x39F2 PUSH2 0x3FDF JUMP JUMPDEST DUP1 PUSH2 0x3A01 JUMPI POP PUSH2 0x3A00 PUSH2 0x4006 JUMP JUMPDEST JUMPDEST PUSH2 0x3A73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E206F6E6C79206465706F736974207061796D656E74206F6E6365000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 EQ PUSH2 0x3AFD JUMPI PUSH2 0x3AFB PUSH1 0x5 PUSH1 0x1 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 CALLER DUP5 PUSH2 0x4056 JUMP JUMPDEST POP JUMPDEST PUSH32 0xD348A8F42FAE8DB1D0030271B37ED6D94A5E292FF36DB57B244FFE13F494DD45 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x3B70 PUSH2 0x4006 JUMP JUMPDEST ISZERO PUSH2 0x3BAA JUMPI PUSH1 0x3 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3B97 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x3BA4 PUSH2 0x4283 JUMP JUMPDEST POP PUSH2 0x3BD2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x5 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3BCC JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3BE5 JUMPI INVALID JUMPDEST PUSH2 0x3BED PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3BF8 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3CC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F70657261746F7220616C726561647920736574000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3D65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F7420736574206F70657261746F7220746F20616464726573732030 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB3B3F5F64AB192E4B5FEFDE1F51CE9733BBDCF831951543B325AEBD49CC27EC4 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3E1B JUMPI INVALID JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3E27 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3E48 JUMPI POP PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x3E3A JUMPI INVALID JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3E46 JUMPI INVALID JUMPDEST EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH32 0x7CACEB1091BBAA84D09AB116A1FD72387EAAB8A33D70FC39168B9B75686EE32C DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH32 0xBB39EBB37E60FB5D606FFDB749D2336E56B88E6C88C4BD6513B308F643186EED DUP2 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3EF2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3ED7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3F1F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F71 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x42AB JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3F8B JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3FED JUMPI INVALID JUMPDEST PUSH2 0x3FF5 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x4000 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x4015 JUMPI INVALID JUMPDEST PUSH2 0x401D PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x4028 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x403D JUMPI INVALID JUMPDEST PUSH2 0x4045 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x4050 JUMPI INVALID JUMPDEST EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4063 DUP6 DUP6 DUP5 PUSH2 0x436B JUMP JUMPDEST SWAP1 POP PUSH2 0x4071 DUP6 DUP5 ADDRESS DUP6 PUSH2 0x44D0 JUMP JUMPDEST DUP1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x408F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x4153 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E73756666696369656E74206465706F73697420746F2072656D6F76650000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4166 DUP4 DUP3 PUSH2 0x3F2F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4179 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x9060F8FFC7ACD8270ABF2337023E6377669CA44D5B2A23F3513A29380940F357 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x41FD JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4269 DUP6 DUP6 PUSH2 0x3F79 JUMP JUMPDEST SWAP1 POP PUSH2 0x4277 DUP6 DUP6 DUP6 DUP5 PUSH2 0x46C3 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x429A TIMESTAMP PUSH1 0x1 SLOAD PUSH2 0x32CD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x42A5 DUP2 PUSH2 0x46E8 JUMP JUMPDEST DUP1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x4358 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x431D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4302 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x434A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43DB DUP3 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4381 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x32CD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x43EE JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0xFE2CAF3897EC3E02A1D458D232D7C62C17809D25DBFE65864CE842162D6C217C DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4472 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 PUSH2 0x44DA DUP2 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x454C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420746F6B656E49440000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4555 DUP6 PUSH2 0x1A14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x460F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4623 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x46BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6B656E207472616E73666572206661696C65640000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46D0 DUP6 DUP6 DUP5 PUSH2 0x407C JUMP JUMPDEST SWAP1 POP PUSH2 0x46DD DUP6 DUP5 DUP5 PUSH2 0x4729 JUMP JUMPDEST DUP1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH32 0x337B880688EB06DF8ADB77036A6C8DEF1DA2B520BC901C04B3A5A23F9AE13039 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP3 PUSH2 0x4733 DUP2 PUSH2 0x3E0C JUMP JUMPDEST PUSH2 0x47A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420746F6B656E49440000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x47AE DUP5 PUSH2 0x1A14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4848 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x485E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x48E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6B656E207472616E73666572206661696C65640000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP INVALID PUSH14 0x7573742062652063616C6C656420 PUSH24 0x697468696E20636F6E747261637420636F6E737472756374 PUSH16 0x726F6E6C79206265666F726520646570 PUSH16 0x736974732061726520636F6D706C6574 PUSH6 0x64A265627A7A PUSH19 0x3158207A0A387F2FC81EA4DB937D0C3F7BAA7C 0xE2 0xBE COINBASE 0x5E PUSH11 0xB620D1EF2003B96FCD6058 PUSH5 0x736F6C6343 STOP SDIV 0xD STOP ORIGIN ",
				"sourceMap": "2518:21234:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2518:21234:4;;;;;;;"
			}
		}
	},
	"sources": {
		"escrows/CountdownGriefingEscrow.sol": {
			"id": 4
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 52
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"id": 55
		},
		"agreements/CountdownGriefing.sol": {
			"id": 0
		},
		"modules/Countdown.sol": {
			"id": 11
		},
		"modules/Deadline.sol": {
			"id": 12
		},
		"modules/Griefing.sol": {
			"id": 16
		},
		"helpers/DecimalMath.sol": {
			"id": 6
		},
		"modules/Staking.sol": {
			"id": 23
		},
		"modules/TokenManager.sol": {
			"id": 25
		},
		"modules/BurnDAI.sol": {
			"id": 9
		},
		"modules/BurnNMR.sol": {
			"id": 10
		},
		"modules/iNMR.sol": {
			"id": 27
		},
		"helpers/UniswapExchangeInterface.sol": {
			"id": 8
		},
		"modules/Deposit.sol": {
			"id": 13
		},
		"modules/EventMetadata.sol": {
			"id": 14
		},
		"modules/Operated.sol": {
			"id": 18
		},
		"modules/Template.sol": {
			"id": 24
		},
		"modules/iFactory.sol": {
			"id": 26
		},
		"modules/iRegistry.sol": {
			"id": 28
		}
	},
	"sourceCodes": {
		"escrows/CountdownGriefingEscrow.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../agreements/CountdownGriefing.sol\";\nimport \"../modules/iFactory.sol\";\nimport \"../modules/iRegistry.sol\";\nimport \"../modules/Countdown.sol\";\nimport \"../modules/Staking.sol\";\nimport \"../modules/EventMetadata.sol\";\nimport \"../modules/Operated.sol\";\nimport \"../modules/Template.sol\";\n\n/// @title CountdownGriefingEscrow\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/escrows/CountdownGriefingEscrow.png\n/// @notice This escrow allows for a buyer and a seller to deposit their stake and payment before sending it to a CountdownGriefing agreement.\n///         A new instance is initialized by the factory using the `initData` received. See the `initialize()` function for details.\n///         Notable features:\n///             - The deposited payment and stake become the stake of the agreement once the escrow is finalized.\n///             - If the buyer is not defined on creation, the first user to deposit the payment becomes the buyer.\n///             - If the seller is not defined on creation, the first user to deposit the stake becomes the seller.\n///             - Either party is able to cancel the escrow and retrieve their deposit if their counterparty never completes their deposit.\n///             - If the buyer deposits their payment after the stake has already been deposited by the seller, this starts a countdown for the seller to finalize the escrow.\n///             - If the seller does not finalize the escrow before the end of the countdown, the buyer can timeout the escrow and recover their stake.\n///             - An operator can optionally be defined to grant full permissions to a trusted external address or contract. This operator will be inherited by the spawned agreement.\n///         **Note**\n///             Given the nature of ethereum, it is possible that while a cancel request is pending, the counterparty finalizes the escrow and the deposits are transfered to the agreement.\n///             This contract is designed such that there is only two end states: deposits are returned to the buyer and the seller OR the agreement is successfully created.\n///             This is why a user CANNOT rely on the cancellation feature to always work.\ncontract CountdownGriefingEscrow is Countdown, Staking, EventMetadata, Operated, Template {\n\n    using SafeMath for uint256;\n\n    Data private _data;\n    struct Data {\n        address buyer;\n        address seller;\n        TokenManager.Tokens tokenID;\n        uint128 paymentAmount;\n        uint128 stakeAmount;\n        EscrowStatus status;\n        AgreementParams agreementParams;\n    }\n\n    struct AgreementParams {\n        uint120 ratio;\n        Griefing.RatioType ratioType;\n        uint128 countdownLength;\n    }\n\n    event Initialized(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 countdownLength,\n        bytes metadata,\n        bytes agreementParams\n    );\n    event StakeDeposited(address seller, uint256 amount);\n    event PaymentDeposited(address buyer, uint256 amount);\n    event Finalized(address agreement);\n    event DataSubmitted(bytes data);\n    event Cancelled();\n\n    /// @notice Constructor used to initialize the escrow parameters.\n    /// @dev Access Control: only factory\n    ///      State Machine: before all\n    /// @param operator address of the operator that overrides access control. Optional parameter. Passing the address(0) will disable operator functionality.\n    /// @param buyer address of the buyer. Optional parameter. This address is the only one able to deposit the payment. If not set, the first to deposit the payment becomes the buyer.\n    /// @param seller address of the seller. Optional parameter. This address is the only one able to deposit the stake. If not set, the first to deposit the stake becomes the seller.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. Required parameter. This ID must be one of the IDs supported by TokenManager.\n    /// @param paymentAmount uint256 amount of tokens (18 decimals) to be deposited by buyer as payment. Required parameter. This number must fit in a uint128 for optimization reasons.\n    /// @param stakeAmount uint256 amount of tokens (18 decimals) to be deposited by seller as stake. Required parameter. This number must fit in a uint128 for optimization reasons.\n    /// @param escrowCountdown uint256 amount of time (in seconds) the seller has to finalize the escrow after the payment and stake is deposited. Required parameter.\n    /// @param metadata bytes data (any format) to emit as event on initialization. Optional parameter.\n    /// @param agreementParams bytes ABI-encoded parameters used by CountdownGriefing agreement on initialization. Required parameter.\n    ///                        This encoded data blob must contain the uint120 ratio, Griefing.RatioType ratioType, and uint128 agreementCountdown encoded as `abi.encode(ratio, ratioType, agreementCountdown)`.\n    ///                        See CountdownGriefing initialize function for additional details.\n    function initialize(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 escrowCountdown,\n        bytes memory metadata,\n        bytes memory agreementParams\n    ) public initializeTemplate() {\n        // set participants if defined\n        if (buyer != address(0)) {\n            _data.buyer = buyer;\n        }\n        if (seller != address(0)) {\n            _data.seller = seller;\n        }\n\n        // set operator if defined\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set token\n        require(TokenManager.isValidTokenID(tokenID), 'invalid token');\n        _data.tokenID = tokenID;\n\n        // set amounts if defined\n        if (paymentAmount != uint256(0)) {\n            require(paymentAmount <= uint256(uint128(paymentAmount)), \"paymentAmount is too large\");\n            _data.paymentAmount = uint128(paymentAmount);\n        }\n        if (stakeAmount != uint256(0)) {\n            require(stakeAmount == uint256(uint128(stakeAmount)), \"stakeAmount is too large\");\n            _data.stakeAmount = uint128(stakeAmount);\n        }\n\n        // set countdown length\n        Countdown._setLength(escrowCountdown);\n\n        // set metadata if defined\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // set agreementParams if defined\n        if (agreementParams.length != 0) {\n            (\n                uint256 ratio,\n                Griefing.RatioType ratioType,\n                uint256 agreementCountdown\n            ) = abi.decode(agreementParams, (uint256, Griefing.RatioType, uint256));\n            require(ratio == uint256(uint120(ratio)), \"ratio out of bounds\");\n            require(agreementCountdown == uint256(uint128(agreementCountdown)), \"agreementCountdown out of bounds\");\n            _data.agreementParams = AgreementParams(uint120(ratio), ratioType, uint128(agreementCountdown));\n        }\n\n        // emit event\n        emit Initialized(operator, buyer, seller, tokenID, paymentAmount, stakeAmount, escrowCountdown, metadata, agreementParams);\n    }\n\n    /// @notice Emit metadata event.\n    /// @dev Access Control: operator\n    ///      State Machine: always\n    /// @param metadata Data (any format) to emit as event\n    function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }\n\n    /// @notice Deposit Stake and set seller address.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if buyer already deposited the payment, finalize the escrow.\n    /// @dev Access Control: anyone\n    ///      State Machine: before finalize() OR before cancel()\n    /// @param seller address of the seller\n    function depositAndSetSeller(address seller) public {\n        // restrict state machine\n        require(_data.seller == address(0), \"seller already set\");\n\n        // set seller\n        _data.seller = seller;\n\n        // deposit stake\n        _depositStake();\n    }\n\n    /// @notice Deposit Stake.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if buyer already deposited the payment, finalize the escrow.\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: before finalize() OR before cancel()\n    function depositStake() public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n\n        // restrict state machine\n        require(_data.seller != address(0), \"seller not yet set\");\n\n        // deposit stake\n        _depositStake();\n    }\n\n    function _depositStake() private {\n        // restrict state machine\n        require(isOpen() || onlyPaymentDeposited(), \"can only deposit stake once\");\n\n        // declare storage variables in memory\n        address seller = _data.seller;\n        uint256 stakeAmount = uint256(_data.stakeAmount);\n\n        // Add the stake amount\n        if (stakeAmount != uint256(0)) {\n            Staking._addStake(_data.tokenID, seller, msg.sender, stakeAmount);\n        }\n\n        // emit event\n        emit StakeDeposited(seller, stakeAmount);\n\n        // If payment is deposited, finalize the escrow\n        if (onlyPaymentDeposited()) {\n            _data.status = EscrowStatus.isDeposited;\n            finalize();\n        } else {\n            _data.status = EscrowStatus.onlyStakeDeposited;\n        }\n    }\n\n    /// @notice Deposit Payment and set buyer address.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if seller already deposited the stake, start the finalization countdown.\n    /// @dev Access Control: anyone\n    ///      State Machine: before finalize() OR before cancel()\n    /// @param buyer address of the buyer\n    function depositAndSetBuyer(address buyer) public {\n        // restrict state machine\n        require(_data.buyer == address(0), \"buyer already set\");\n\n        // set buyer\n        _data.buyer = buyer;\n\n        // deposit payment\n        _depositPayment();\n    }\n\n    /// @notice Deposit Payment.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if seller already deposited the stake, start the finalization countdown.\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: before finalize() OR before cancel()\n    function depositPayment() public {\n        // restrict access control\n        require(isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only buyer or operator\");\n\n        // restrict state machine\n        require(_data.buyer != address(0), \"buyer not yet set\");\n\n        // deposit payment\n        _depositPayment();\n    }\n\n    function _depositPayment() private {\n        // restrict state machine\n        require(isOpen() || onlyStakeDeposited(), \"can only deposit payment once\");\n\n        // declare storage variables in memory\n        address buyer = _data.buyer;\n        uint256 paymentAmount = uint256(_data.paymentAmount);\n\n        // Add the payment as a stake\n        if (paymentAmount != uint256(0)) {\n            Staking._addStake(_data.tokenID, buyer, msg.sender, paymentAmount);\n        }\n\n        // emit event\n        emit PaymentDeposited(buyer, paymentAmount);\n\n        // If stake is deposited, start countdown for seller to finalize\n        if (onlyStakeDeposited()) {\n            _data.status = EscrowStatus.isDeposited;\n            Countdown._start();\n        } else {\n            _data.status = EscrowStatus.onlyPaymentDeposited;\n        }\n    }\n\n    /// @notice Finalize escrow and execute completion script\n    ///          - create the agreement\n    ///          - transfer deposited stake and payment to agreement\n    ///          - start agreement countdown\n    ///          - disable agreement operator\n    /// @dev Access Control: seller OR operator\n    ///      State Machine: after depositStake() AND after depositPayment()\n    function finalize() public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isDeposited(), \"only after deposit\");\n\n        // create the agreement\n\n        address agreement;\n        {\n            // get the agreement factory address\n            address escrowFactory = Template.getFactory();\n            address escrowRegistry = iFactory(escrowFactory).getInstanceRegistry();\n            address agreementFactory = abi.decode(iRegistry(escrowRegistry).getFactoryData(escrowFactory), (address));\n\n            // encode initialization function\n            bytes memory initCalldata = abi.encodeWithSelector(\n                iFactory(agreementFactory).getInitSelector(),\n                address(this), // operator\n                _data.seller,  // staker\n                _data.buyer,   // counterparty\n                _data.tokenID, // tokenID\n                uint256(_data.agreementParams.ratio),           // griefRatio\n                _data.agreementParams.ratioType,                // ratioType\n                uint256(_data.agreementParams.countdownLength), // countdownLength\n                bytes(\"\")      // metadata\n            );\n\n            // deploy and initialize agreement contract\n            agreement = iFactory(agreementFactory).create(initCalldata);\n        }\n\n        // transfer stake and payment to the agreement\n\n        uint256 totalStake;\n        {\n            uint256 paymentAmount = Deposit._clearDeposit(_data.tokenID, _data.buyer);\n            uint256 stakeAmount = Deposit._clearDeposit(_data.tokenID, _data.seller);\n            totalStake = paymentAmount.add(stakeAmount);\n        }\n\n        if (totalStake > 0) {\n            TokenManager._approve(_data.tokenID, agreement, totalStake);\n            CountdownGriefing(agreement).increaseStake(totalStake);\n        }\n\n        // start agreement countdown\n\n        CountdownGriefing(agreement).startCountdown();\n\n        // transfer operator\n        address operator = Operated.getOperator();\n        if (operator != address(0)) {\n            CountdownGriefing(agreement).transferOperator(operator);\n        } else {\n            CountdownGriefing(agreement).renounceOperator();\n        }\n\n        // update status\n        _data.status = EscrowStatus.isFinalized;\n\n        // delete storage\n        delete _data.tokenID;\n        delete _data.paymentAmount;\n        delete _data.stakeAmount;\n        delete _data.agreementParams;\n\n        // emit event\n        emit Finalized(agreement);\n    }\n\n    /// @notice Submit data to the buyer\n    /// @dev Access Control: seller OR operator\n    ///      State Machine: after finalize()\n    /// @param data Data (any format) to submit to the buyer\n    function submitData(bytes memory data) public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isFinalized(), \"only after finalized\");\n\n        // emit event\n        emit DataSubmitted(data);\n    }\n\n    /// @notice Cancel escrow because no interested counterparty\n    ///          - return deposit to caller\n    ///          - close escrow\n    /// @dev Access Control: seller OR buyer OR operator\n    ///      State Machine: before depositStake() OR before depositPayment()\n    function cancel() public {\n        // restrict access control\n        require(isSeller(msg.sender) || isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only seller or buyer or operator\");\n        // restrict state machine\n        require(isOpen() || onlyStakeDeposited() || onlyPaymentDeposited(), \"only before deposits are completed\");\n\n        // cancel escrow and return deposits\n        _cancel();\n    }\n\n    /// @notice Cancel escrow if seller does not finalize\n    ///          - return stake to seller\n    ///          - return payment to buyer\n    ///          - close escrow\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: after depositStake() AND after depositPayment() AND after Countdown.isOver()\n    function timeout() public {\n        // restrict access control\n        require(isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only buyer or operator\");\n        // restrict state machine\n        require(isDeposited() && Countdown.isOver(), \"only after countdown ended\");\n\n        // cancel escrow and return deposits\n        _cancel();\n    }\n\n    function _cancel() private {\n        // declare storage variables in memory\n        address seller = _data.seller;\n        address buyer = _data.buyer;\n        TokenManager.Tokens tokenID = _data.tokenID;\n\n        // return stake to seller\n        if (Deposit.getDeposit(tokenID, seller) != 0) {\n            Staking._takeFullStake(tokenID, seller, seller);\n        }\n\n        // return payment to buyer\n        if (Deposit.getDeposit(tokenID, buyer) != 0) {\n            Staking._takeFullStake(tokenID, buyer, buyer);\n        }\n\n        // update status\n        _data.status = EscrowStatus.isCancelled;\n\n        // delete storage\n        delete _data.tokenID;\n        delete _data.paymentAmount;\n        delete _data.stakeAmount;\n        delete _data.agreementParams;\n\n        // emit event\n        emit Cancelled();\n    }\n\n    /// @notice Called by the operator to transfer control to new operator\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    /// @param operator Address of the new operator\n    function transferOperator(address operator) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // transfer operator\n        Operated._transferOperator(operator);\n    }\n\n    /// @notice Called by the operator to renounce control\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    function renounceOperator() public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // renounce operator\n        Operated._renounceOperator();\n    }\n\n    /// View functions\n\n    /// @notice Get the address of the buyer (if set)\n    /// @return buyer address of the buyer\n    function getBuyer() public view returns (address buyer) {\n        return _data.buyer;\n    }\n\n    /// @notice Validate if the address matches the stored buyer address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isBuyer(address caller) internal view returns (bool validity) {\n        return caller == getBuyer();\n    }\n\n    /// @notice Get the address of the seller (if set)\n    /// @return buyer address of the buyer\n    function getSeller() public view returns (address seller) {\n        return _data.seller;\n    }\n\n    /// @notice Validate if the address matches the stored seller address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isSeller(address caller) internal view returns (bool validity) {\n        return caller == getSeller();\n    }\n\n    /// @notice Return the amount of tokens deposited by the user\n    /// @param user address of the user to query the deposit\n    /// @return amount uint256 amount of tokens deposited\n    function getDeposit(address user) public view returns (uint256 amount) {\n        return Deposit.getDeposit(_data.tokenID, user);\n    }\n\n    /// @notice Get the data from storage.\n    /// @return tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return uint128 paymentAmount set in initialization.\n    /// @return uint128 stakeAmount set in initialization.\n    /// @return uint120 ratio used for initialization of agreement on completion.\n    /// @return Griefing.RatioType ratioType used for initialization of agreement on completion.\n    /// @return uint128 countdownLength used for initialization of agreement on completion.\n    function getData() public view returns (\n        TokenManager.Tokens tokenID,\n        uint128 paymentAmount,\n        uint128 stakeAmount,\n        uint120 ratio,\n        Griefing.RatioType ratioType,\n        uint128 countdownLength\n    ) {\n        return (\n            _data.tokenID,\n            _data.paymentAmount,\n            _data.stakeAmount,\n            _data.agreementParams.ratio,\n            _data.agreementParams.ratioType,\n            _data.agreementParams.countdownLength\n        );\n    }\n\n    enum EscrowStatus { isOpen, onlyStakeDeposited, onlyPaymentDeposited, isDeposited, isFinalized, isCancelled }\n    /// @notice Return the status of the state machine\n    /// @return EscrowStatus status from of the following states:\n    ///          - isOpen: initialized but no deposits made\n    ///          - onlyStakeDeposited: only stake deposit completed\n    ///          - onlyPaymentDeposited: only payment deposit completed\n    ///          - isDeposited: both payment and stake deposit is completed\n    ///          - isFinalized: the escrow completed successfully\n    ///          - isCancelled: the escrow was cancelled\n    function getEscrowStatus() public view returns (EscrowStatus status) {\n        return _data.status;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isOpen state\n    /// @return validity bool true if correct state\n    function isOpen() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isOpen;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.onlyStakeDeposited state\n    /// @return validity bool true if correct state\n    function onlyStakeDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.onlyStakeDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.onlyPaymentDeposited state\n    /// @return validity bool true if correct state\n    function onlyPaymentDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.onlyPaymentDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isDeposited state\n    /// @return validity bool true if correct state\n    function isDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isFinalized state\n    /// @return validity bool true if correct state\n    function isFinalized() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isFinalized;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isCancelled state\n    /// @return validity bool true if correct state\n    function isCancelled() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isCancelled;\n    }\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
		"agreements/CountdownGriefing.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../modules/Countdown.sol\";\nimport \"../modules/Griefing.sol\";\nimport \"../modules/EventMetadata.sol\";\nimport \"../modules/Operated.sol\";\nimport \"../modules/Template.sol\";\n\n/// @title CountdownGriefing\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/agreements/CountdownGriefing.png\n/// @notice This agreement template allows a staker to grant permission to a counterparty to punish, reward, or release their stake until the countdown is completed.\n///         A new instance is initialized by the factory using the `initData` received. See the `initialize()` function for details on initialization parameters.\n///         Notable features:\n///             - The staker can increase the stake at any time before the end of the countdown.\n///             - The counterparty can increase, release, or punish the stake at any time before the end of the countdown.\n///             - The agreement can be terminated by the staker by starting the countdown. Once the countdown completes the staker can retrieve their remaining stake.\n///             - Punishments use griefing which requires the counterparty to pay an appropriate amount based on the desired punishment and a predetermined ratio.\n///             - An operator can optionally be defined to grant full permissions to a trusted external address or contract.\ncontract CountdownGriefing is Countdown, Griefing, EventMetadata, Operated, Template {\n\n    using SafeMath for uint256;\n\n    Data private _data;\n    struct Data {\n        address staker;\n        address counterparty;\n    }\n\n    event Initialized(\n        address operator,\n        address staker,\n        address counterparty,\n        TokenManager.Tokens tokenID,\n        uint256 ratio,\n        Griefing.RatioType ratioType,\n        uint256 countdownLength,\n        bytes metadata\n    );\n\n    /// @notice Constructor used to initialize the agreement parameters.\n    ///         All parameters are passed as ABI-encoded calldata to the factory. This calldata must include the function selector.\n    /// @dev Access Control: only factory\n    ///      State Machine: before all\n    /// @param operator address of the operator that overrides access control. Optional parameter. Passing the address(0) will disable operator functionality.\n    /// @param staker address of the staker who owns the stake. Required parameter. This address is the only one able to retrieve the stake and cannot be changed.\n    /// @param counterparty address of the counterparty who has the right to reward, release, and punish the stake. Required parameter. This address cannot be changed.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. Required parameter. This ID must be one of the IDs supported by TokenManager.\n    /// @param ratio uint256 number (18 decimals) used to determine punishment cost. Required parameter. See Griefing module for details on valid input.\n    /// @param ratioType Griefing.RatioType number used to determine punishment cost. Required parameter. See Griefing module for details on valid input.\n    /// @param countdownLength uint256 amount of time (in seconds) the counterparty has to punish or reward before the agreement ends. Required parameter.\n    /// @param metadata bytes data (any format) to emit as event on initialization. Optional parameter.\n    function initialize(\n        address operator,\n        address staker,\n        address counterparty,\n        TokenManager.Tokens tokenID,\n        uint256 ratio,\n        Griefing.RatioType ratioType,\n        uint256 countdownLength,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        // set storage values\n        _data.staker = staker;\n        _data.counterparty = counterparty;\n\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set griefing ratio\n        Griefing._setRatio(staker, tokenID, ratio, ratioType);\n\n        // set countdown length\n        Countdown._setLength(countdownLength);\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, staker, counterparty, tokenID, ratio, ratioType, countdownLength, metadata);\n    }\n\n    // state functions\n\n    /// @notice Emit metadata event\n    /// @dev Access Control: operator\n    ///      State Machine: always\n    /// @param metadata bytes data (any format) to emit as event\n    function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }\n\n    /// @notice Called by the staker to increase the stake\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount\n    /// @dev Access Control: staker OR operator\n    ///      State Machine: before isTerminated()\n    /// @param amountToAdd uint256 amount of tokens (18 decimals) to be added to the stake\n    function increaseStake(uint256 amountToAdd) public {\n        // restrict access\n        require(isStaker(msg.sender) || Operated.isOperator(msg.sender), \"only staker or operator\");\n\n        // require agreement is not ended\n        require(!isTerminated(), \"agreement ended\");\n\n        // declare variable in memory\n        address staker = _data.staker;\n\n        // add stake\n        Staking._addStake(Griefing.getTokenID(staker), staker, msg.sender, amountToAdd);\n    }\n\n    /// @notice Called by the counterparty to increase the stake\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount\n    /// @dev Access Control: counterparty OR operator\n    ///      State Machine: before isTerminated()\n    /// @param amountToAdd uint256 amount of tokens (18 decimals) to be added to the stake\n    function reward(uint256 amountToAdd) public {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isOperator(msg.sender), \"only counterparty or operator\");\n\n        // require agreement is not ended\n        require(!isTerminated(), \"agreement ended\");\n\n        // declare variable in memory\n        address staker = _data.staker;\n\n        // add stake\n        Staking._addStake(Griefing.getTokenID(staker), staker, msg.sender, amountToAdd);\n    }\n\n    /// @notice Called by the counterparty to punish the stake\n    ///          - burns the punishment from the stake and a proportional amount from the counterparty balance\n    ///          - the cost of the punishment is calculated with the `Griefing.getCost()` function using the predetermined griefing ratio\n    ///          - tokens (ERC-20) are burned from the caller and requires approval of this contract for appropriate amount\n    /// @dev Access Control: counterparty OR operator\n    ///      State Machine: before isTerminated()\n    /// @param punishment uint256 amount of tokens (18 decimals) to be burned from the stake\n    /// @param message bytes data (any format) to emit as event giving reason for the punishment\n    /// @return cost uint256 amount of tokens (18 decimals) it cost to perform punishment\n    function punish(uint256 punishment, bytes memory message) public returns (uint256 cost) {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isOperator(msg.sender), \"only counterparty or operator\");\n\n        // require agreement is not ended\n        require(!isTerminated(), \"agreement ended\");\n\n        // execute griefing\n        return Griefing._grief(msg.sender, _data.staker, punishment, message);\n    }\n\n    /// @notice Called by the counterparty to release the stake to the staker\n    /// @dev Access Control: counterparty OR operator\n    ///      State Machine: anytime\n    /// @param amountToRelease uint256 amount of tokens (18 decimals) to be released from the stake\n    function releaseStake(uint256 amountToRelease) public {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isOperator(msg.sender), \"only counterparty or operator\");\n\n        // declare variable in memory\n        address staker = _data.staker;\n\n        // release stake back to the staker\n        Staking._takeStake(Griefing.getTokenID(staker), staker, staker, amountToRelease);\n    }\n\n    /// @notice Called by the staker to begin countdown to finalize the agreement\n    /// @dev Access Control: staker OR operator\n    ///      State Machine: before Countdown.isActive()\n    /// @return deadline uint256 timestamp (Unix seconds) at which the agreement will be finalized\n    function startCountdown() public returns (uint256 deadline) {\n        // restrict access\n        require(isStaker(msg.sender) || Operated.isOperator(msg.sender), \"only staker or operator\");\n\n        // require countdown is not started\n        require(isInitialized(), \"deadline already set\");\n\n        // start countdown\n        return Countdown._start();\n    }\n\n    /// @notice Called by the staker to retrieve the remaining stake once the agreement has ended\n    /// @dev Access Control: staker OR operator\n    ///      State Machine: after Countdown.isOver()\n    /// @param recipient address of the account where to send the stake\n    /// @return amount uint256 amount of tokens (18 decimals) retrieved\n    function retrieveStake(address recipient) public returns (uint256 amount) {\n        // restrict access\n        require(isStaker(msg.sender) || Operated.isOperator(msg.sender), \"only staker or operator\");\n\n        // require deadline is passed\n        require(isTerminated(), \"deadline not passed\");\n\n        // declare variable in memory\n        address staker = _data.staker;\n\n        // retrieve stake\n        return Staking._takeFullStake(Griefing.getTokenID(staker), staker, recipient);\n    }\n\n    /// @notice Called by the operator to transfer control to new operator\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    /// @param operator address of the new operator\n    function transferOperator(address operator) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // transfer operator\n        Operated._transferOperator(operator);\n    }\n\n    /// @notice Called by the operator to renounce control\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    function renounceOperator() public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // renounce operator\n        Operated._renounceOperator();\n    }\n\n    // view functions\n\n    /// @notice Get the address of the staker (if set)\n    /// @return staker address of the staker\n    function getStaker() public view returns (address staker) {\n        return _data.staker;\n    }\n\n    /// @notice Validate if the address matches the stored staker address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isStaker(address caller) internal view returns (bool validity) {\n        return caller == getStaker();\n    }\n\n    /// @notice Get the address of the counterparty (if set)\n    /// @return counterparty address of counterparty account\n    function getCounterparty() public view returns (address counterparty) {\n        return _data.counterparty;\n    }\n\n    /// @notice Validate if the address matches the stored counterparty address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isCounterparty(address caller) internal view returns (bool validity) {\n        return caller == getCounterparty();\n    }\n\n    /// @notice Get the token ID and address used by the agreement\n    /// @return tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return token address of the ERC20 token.\n    function getToken() public view returns (TokenManager.Tokens tokenID, address token) {\n        tokenID = Griefing.getTokenID(_data.staker);\n        return (tokenID, TokenManager.getTokenAddress(tokenID));\n    }\n\n    /// @notice Get the current stake of the agreement\n    /// @return stake uint256 amount of tokens (18 decimals) staked.\n    function getStake() public view returns (uint256 stake) {\n        return Deposit.getDeposit(Griefing.getTokenID(_data.staker), _data.staker);\n    }\n\n    /// @notice Validate if the current stake is greater than 0\n    /// @return validity bool true if non-zero stake\n    function isStaked() public view returns (bool validity) {\n        uint256 currentStake = getStake();\n        return currentStake > 0;\n    }\n\n    enum AgreementStatus { isInitialized, isInCountdown, isTerminated }\n    /// @notice Get the status of the state machine\n    /// @return status AgreementStatus from the following states:\n    ///          - isInitialized: initialized but no deposits made\n    ///          - isInCountdown: staker has triggered countdown to termination\n    ///          - isTerminated: griefing agreement is over, staker can retrieve stake\n    function getAgreementStatus() public view returns (AgreementStatus status) {\n        if (Countdown.isOver()) {\n            return AgreementStatus.isTerminated;\n        } else if (Countdown.isActive()) {\n            return AgreementStatus.isInCountdown;\n        } else {\n            return AgreementStatus.isInitialized;\n        }\n    }\n\n    /// @notice Validate if the state machine is in the AgreementStatus.isInitialized state\n    /// @return validity bool true if correct state\n    function isInitialized() internal view returns (bool validity) {\n        return getAgreementStatus() == AgreementStatus.isInitialized;\n    }\n\n    /// @notice Validate if the state machine is in the AgreementStatus.isInCountdown state\n    /// @return validity bool true if correct state\n    function isInCountdown() internal view returns (bool validity) {\n        return getAgreementStatus() == AgreementStatus.isInCountdown;\n    }\n\n    /// @notice Validate if the state machine is in the AgreementStatus.isTerminated state\n    /// @return validity bool true if correct state\n    function isTerminated() internal view returns (bool validity) {\n        return getAgreementStatus() == AgreementStatus.isTerminated;\n    }\n}\n",
		"modules/Countdown.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Deadline.sol\";\n\n\n/// @title Countdown\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Countdown.png\n/// @notice This module provides an arbitrary length countdown.\n///         The countdown makes use of block timestamps to determine start time and end time.\ncontract Countdown is Deadline {\n\n    using SafeMath for uint256;\n\n    uint256 private _length;\n\n    event LengthSet(uint256 length);\n\n    // state functions\n\n    /// @notice Set the length of the countdown\n    /// @param length uint256 The amount of time in seconds.\n    function _setLength(uint256 length) internal {\n        _length = length;\n        emit LengthSet(length);\n    }\n\n    /// @notice Start the countdown based on the current block timestamp\n    /// @return deadline uint256 Unix timestamp of the end of the countdown (current timestamp + countdown length).\n    function _start() internal returns (uint256 deadline) {\n        deadline = _length.add(now);\n        Deadline._setDeadline(deadline);\n        return deadline;\n    }\n\n    // view functions\n\n    /// @notice Get the length of the countdown in seconds\n    /// @return length uint256 The amount of time in seconds.\n    function getLength() public view returns (uint256 length) {\n        return _length;\n    }\n\n    enum CountdownStatus { isNull, isSet, isActive, isOver }\n    /// @notice Get the status of the state machine\n    /// @return status CountdownStatus from the following states:\n    ///         - isNull: the length has not been set\n    ///         - isSet: the length is set, but the countdown is not started\n    ///         - isActive: the countdown has started but not yet ended\n    ///         - isOver: the countdown has completed\n    function getCountdownStatus() public view returns (CountdownStatus status) {\n        if (_length == 0)\n            return CountdownStatus.isNull;\n        if (Deadline.getDeadlineStatus() == DeadlineStatus.isNull)\n            return CountdownStatus.isSet;\n        if (Deadline.getDeadlineStatus() != DeadlineStatus.isOver)\n            return CountdownStatus.isActive;\n        else\n            return CountdownStatus.isOver;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isNull state\n    /// @return validity bool true if correct state\n    function isNull() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isNull;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isSet state\n    /// @return validity bool true if correct state\n    function isSet() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isSet;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isActive state\n    /// @return validity bool true if correct state\n    function isActive() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isActive;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isOver state\n    /// @return validity bool true if correct state\n    function isOver() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isOver;\n    }\n\n}\n",
		"modules/Deadline.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n\n/// @title Deadline\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Deadline.png\n/// @notice This module allows for setting and validating a deadline.\n///         The deadline makes use of block timestamps to determine end time.\ncontract Deadline {\n\n    using SafeMath for uint256;\n\n    uint256 private _deadline;\n\n    event DeadlineSet(uint256 deadline);\n\n    // state functions\n\n    /// @notice Set the deadline\n    /// @param deadline uint256 Unix timestamp to use as deadline.\n    function _setDeadline(uint256 deadline) internal {\n        _deadline = deadline;\n        emit DeadlineSet(deadline);\n    }\n\n    // view functions\n\n    /// @notice Get the timestamp of the deadline\n    /// @return deadline uint256 Unix timestamp of the deadline.\n    function getDeadline() public view returns (uint256 deadline) {\n        return _deadline;\n    }\n\n    // timeRemaining will default to 0 if _setDeadline is not called\n    // if the now exceeds deadline, just return 0 as the timeRemaining\n\n    /// @notice Get the amount of time remaining until the deadline.\n    ///         Returns 0 if deadline is not set or is passed.\n    /// @return time uint256 Amount of time in seconds until deadline.\n    function getTimeRemaining() public view returns (uint256 time) {\n        if (_deadline > now)\n            return _deadline.sub(now);\n        else\n            return 0;\n    }\n\n    enum DeadlineStatus { isNull, isSet, isOver }\n    /// @notice Get the status of the state machine\n    /// @return status DeadlineStatus from the following states:\n    ///         - isNull: the deadline has not been set\n    ///         - isSet: the deadline is set, but has not passed\n    ///         - isOver: the deadline has passed\n    function getDeadlineStatus() public view returns (DeadlineStatus status) {\n        if (_deadline == 0)\n            return DeadlineStatus.isNull;\n        if (_deadline > now)\n            return DeadlineStatus.isSet;\n        else\n            return DeadlineStatus.isOver;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isNull state\n    /// @return validity bool true if correct state\n    function isNull() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isNull;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isSet state\n    /// @return validity bool true if correct state\n    function isSet() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isSet;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isOver state\n    /// @return validity bool true if correct state\n    function isOver() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isOver;\n    }\n\n}\n",
		"modules/Griefing.sol": "pragma solidity ^0.5.13;\n\nimport \"../helpers/DecimalMath.sol\";\nimport \"./Staking.sol\";\n\n\n/// @title Griefing\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Griefing.png\n/// @notice This module uses the griefing mechanism to punish the stake.\ncontract Griefing is Staking {\n\n    enum RatioType { NaN, Inf, Dec }\n\n    mapping (address => GriefRatio) private _griefRatio;\n    struct GriefRatio {\n        uint256 ratio;\n        RatioType ratioType;\n        TokenManager.Tokens tokenID;\n   }\n\n    event RatioSet(address staker, TokenManager.Tokens tokenID, uint256 ratio, RatioType ratioType);\n    event Griefed(address punisher, address staker, uint256 punishment, uint256 cost, bytes message);\n\n    uint256 internal constant e18 = uint256(10) ** uint256(18);\n\n    // state functions\n\n    /// @notice Set the grief ratio and type for a given staker\n    /// @param staker Address of the staker\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param ratio Uint256 number (18 decimals)\n    ///              NOTE: ratio must be 0 if ratioType is Inf or NaN\n    /// @param ratioType Griefing.RatioType number. Ratio Type must be one of the following three values:\n    ///                   - Dec: Ratio is a decimal number with 18 decimals\n    ///                   - Inf: Punishment at no cost\n    ///                   - NaN: No Punishment\n    function _setRatio(address staker, TokenManager.Tokens tokenID, uint256 ratio, RatioType ratioType) internal {\n        if (ratioType == RatioType.NaN || ratioType == RatioType.Inf) {\n            require(ratio == 0, \"ratio must be 0 when ratioType is NaN or Inf\");\n        }\n\n        // set token in storage\n        require(TokenManager.isValidTokenID(tokenID), 'invalid tokenID');\n        _griefRatio[staker].tokenID = tokenID;\n\n        // set data in storage\n        _griefRatio[staker].ratio = ratio;\n        _griefRatio[staker].ratioType = ratioType;\n\n        // emit event\n        emit RatioSet(staker, tokenID, ratio, ratioType);\n    }\n\n    /// @notice Punish a stake through griefing\n    ///         NOTE: the cost of the punishment is taken form the account of the punisher. This therefore requires appropriate ERC-20 token approval.\n    ///         NOTE: the punishment will use the token from the ratio settings.\n    /// @param punisher Address of the punisher\n    /// @param staker Address of the staker\n    /// @param punishment Amount of tokens (18 decimals) to punish\n    /// @param message Bytes reason string for the punishment\n    /// @return cost Amount of tokens (18 decimals) to pay\n    function _grief(\n        address punisher,\n        address staker,\n        uint256 punishment,\n        bytes memory message\n    ) internal returns (uint256 cost) {\n        // get grief data from storage\n        uint256 ratio = _griefRatio[staker].ratio;\n        RatioType ratioType = _griefRatio[staker].ratioType;\n        TokenManager.Tokens tokenID = _griefRatio[staker].tokenID;\n\n        require(ratioType != RatioType.NaN, \"no punishment allowed\");\n\n        // calculate cost\n        // getCost also acts as a guard when _setRatio is not called before\n        cost = getCost(ratio, punishment, ratioType);\n\n        // burn the cost from the punisher's balance\n        TokenManager._burnFrom(tokenID, punisher, cost);\n\n        // burn the punishment from the target's stake\n        Staking._burnStake(tokenID, staker, punishment);\n\n        // emit event\n        emit Griefed(punisher, staker, punishment, cost, message);\n\n        // return\n        return cost;\n    }\n\n    // view functions\n\n    /// @notice Get the ratio of a staker\n    /// @param staker Address of the staker\n    /// @return ratio Uint256 number (18 decimals)\n    /// @return ratioType Griefing.RatioType number. Ratio Type must be one of the following three values:\n    ///                   - Dec: Ratio is a decimal number with 18 decimals\n    ///                   - Inf: Punishment at no cost\n    ///                   - NaN: No Punishment\n    function getRatio(address staker) public view returns (uint256 ratio, RatioType ratioType) {\n        // get stake data from storage\n        return (_griefRatio[staker].ratio, _griefRatio[staker].ratioType);\n    }\n\n    /// @notice Get the tokenID used by a staker\n    /// @param staker Address of the staker\n    /// @return tokenID TokenManager.Tokens ID of the ERC20 token.\n    function getTokenID(address staker) internal view returns (TokenManager.Tokens tokenID) {\n        // get stake data from storage\n        return (_griefRatio[staker].tokenID);\n    }\n\n    // pure functions\n\n    /// @notice Get exact cost for a given punishment and ratio\n    /// @param ratio Uint256 number (18 decimals)\n    /// @param punishment Amount of tokens (18 decimals) to punish\n    /// @param ratioType Griefing.RatioType number. Ratio Type must be one of the following three values:\n    ///                   - Dec: Ratio is a decimal number with 18 decimals\n    ///                   - Inf: Punishment at no cost\n    ///                   - NaN: No Punishment\n    /// @return cost Amount of tokens (18 decimals) to pay\n    function getCost(uint256 ratio, uint256 punishment, RatioType ratioType) public pure returns(uint256 cost) {\n        if (ratioType == RatioType.Dec)\n            return DecimalMath.mul(SafeMath.mul(punishment, e18), ratio) / e18;\n        if (ratioType == RatioType.Inf)\n            return 0;\n        if (ratioType == RatioType.NaN)\n            revert(\"ratioType cannot be RatioType.NaN\");\n    }\n\n    /// @notice Get approximate punishment for a given cost and ratio.\n    ///         The punishment is an approximate value due to quantization / rounding.\n    /// @param ratio Uint256 number (18 decimals)\n    /// @param cost Amount of tokens (18 decimals) to pay\n    /// @param ratioType Griefing.RatioType number. Ratio Type must be one of the following three values:\n    ///                   - Dec: Ratio is a decimal number with 18 decimals\n    ///                   - Inf: Punishment at no cost\n    ///                   - NaN: No Punishment\n    /// @return punishment Approximate amount of tokens (18 decimals) to punish\n    function getPunishment(uint256 ratio, uint256 cost, RatioType ratioType) public pure returns(uint256 punishment) {\n        if (ratioType == RatioType.Dec)\n            return DecimalMath.div(SafeMath.mul(cost, e18), ratio) / e18;\n        if (ratioType == RatioType.Inf)\n            revert(\"ratioType cannot be RatioType.Inf\");\n        if (ratioType == RatioType.NaN)\n            revert(\"ratioType cannot be RatioType.NaN\");\n    }\n\n}\n",
		"helpers/DecimalMath.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/* @title DecimalMath\n * @dev taken from https://github.com/PolymathNetwork/polymath-core\n * @dev Apache v2 License\n */\nlibrary DecimalMath {\n    using SafeMath for uint256;\n\n    uint256 internal constant e18 = uint256(10) ** uint256(18);\n\n    /**\n     * @notice This function multiplies two decimals represented as (decimal * 10**DECIMALS)\n     * @return uint256 Result of multiplication represented as (decimal * 10**DECIMALS)\n     */\n    function mul(uint256 x, uint256 y) internal pure returns(uint256 z) {\n        z = SafeMath.add(SafeMath.mul(x, y), (e18) / 2) / (e18);\n    }\n\n    /**\n     * @notice This function divides two decimals represented as (decimal * 10**DECIMALS)\n     * @return uint256 Result of division represented as (decimal * 10**DECIMALS)\n     */\n    function div(uint256 x, uint256 y) internal pure returns(uint256 z) {\n        z = SafeMath.add(SafeMath.mul(x, (e18)), y / 2) / y;\n    }\n\n}\n",
		"modules/Staking.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./TokenManager.sol\";\nimport \"./Deposit.sol\";\n\n\n/// @title Staking\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Staking.png\n/// @notice This module wraps the Deposit functions and the ERC20 functions to provide combined actions.\ncontract Staking is Deposit, TokenManager {\n\n    using SafeMath for uint256;\n\n    event StakeBurned(TokenManager.Tokens tokenID, address staker, uint256 amount);\n\n    /// @notice Transfer and deposit ERC20 tokens to this contract.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param staker Address of the staker who owns the stake.\n    /// @param funder Address of the funder from whom the tokens are transfered.\n    /// @param amountToAdd uint256 amount of tokens (18 decimals) to be added to the stake.\n    /// @return newStake uint256 amount of tokens (18 decimals) remaining in the stake.\n    function _addStake(TokenManager.Tokens tokenID, address staker, address funder, uint256 amountToAdd) internal returns (uint256 newStake) {\n        // update deposit\n        newStake = Deposit._increaseDeposit(tokenID, staker, amountToAdd);\n\n        // transfer the stake amount\n        TokenManager._transferFrom(tokenID, funder, address(this), amountToAdd);\n\n        // explicit return\n        return newStake;\n    }\n\n    /// @notice Withdraw some deposited stake and transfer to recipient.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param staker Address of the staker who owns the stake.\n    /// @param recipient Address of the recipient who receives the tokens.\n    /// @param amountToTake uint256 amount of tokens (18 decimals) to be remove from the stake.\n    /// @return newStake uint256 amount of tokens (18 decimals) remaining in the stake.\n    function _takeStake(TokenManager.Tokens tokenID, address staker, address recipient, uint256 amountToTake) internal returns (uint256 newStake) {\n        // update deposit\n        newStake = Deposit._decreaseDeposit(tokenID, staker, amountToTake);\n\n        // transfer the stake amount\n        TokenManager._transfer(tokenID, recipient, amountToTake);\n\n        // explicit return\n        return newStake;\n    }\n\n    /// @notice Withdraw all deposited stake and transfer to recipient.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param staker Address of the staker who owns the stake.\n    /// @param recipient Address of the recipient who receives the tokens.\n    /// @return amountTaken uint256 amount of tokens (18 decimals) taken from the stake.\n    function _takeFullStake(TokenManager.Tokens tokenID, address staker, address recipient) internal returns (uint256 amountTaken) {\n        // get deposit\n        uint256 currentDeposit = Deposit.getDeposit(tokenID, staker);\n\n        // take full stake\n        _takeStake(tokenID, staker, recipient, currentDeposit);\n\n        // return\n        return currentDeposit;\n    }\n\n    /// @notice Burn some deposited stake.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param staker Address of the staker who owns the stake.\n    /// @param amountToBurn uint256 amount of tokens (18 decimals) to be burn from the stake.\n    /// @return newStake uint256 amount of tokens (18 decimals) remaining in the stake.\n    function _burnStake(TokenManager.Tokens tokenID, address staker, uint256 amountToBurn) internal returns (uint256 newStake) {\n        // update deposit\n        uint256 newDeposit = Deposit._decreaseDeposit(tokenID, staker, amountToBurn);\n\n        // burn the stake amount\n        TokenManager._burn(tokenID, amountToBurn);\n\n        // emit event\n        emit StakeBurned(tokenID, staker, amountToBurn);\n\n        // return\n        return newDeposit;\n    }\n\n    /// @notice Burn all deposited stake.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param staker Address of the staker who owns the stake.\n    /// @return amountBurned uint256 amount of tokens (18 decimals) taken from the stake.\n    function _burnFullStake(TokenManager.Tokens tokenID, address staker) internal returns (uint256 amountBurned) {\n        // get deposit\n        uint256 currentDeposit = Deposit.getDeposit(tokenID, staker);\n\n        // burn full stake\n        _burnStake(tokenID, staker, currentDeposit);\n\n        // return\n        return currentDeposit;\n    }\n\n}\n",
		"modules/TokenManager.sol": "pragma solidity ^0.5.13;\n\nimport \"./BurnDAI.sol\";\n\n/// @title TokenManager\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @notice This module provides a standard interface for interacting with supported ERC20 tokens.\ncontract TokenManager is BurnDAI {\n\n    enum Tokens { NaN, NMR, DAI }\n\n    /// @notice Get the address of the given token ID.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return tokenAddress address of the ERC20 token.\n    function getTokenAddress(Tokens tokenID) public pure returns (address tokenAddress) {\n        if (tokenID == Tokens.DAI)\n            return BurnDAI.getTokenAddress();\n        if (tokenID == Tokens.NMR)\n            return BurnNMR.getTokenAddress();\n        return address(0);\n    }\n\n    modifier onlyValidTokenID(Tokens tokenID) {\n        require(isValidTokenID(tokenID), 'invalid tokenID');\n        _;\n    }\n\n    /// @notice Validate the token ID is a supported token.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return validity bool true if the token is supported.\n    function isValidTokenID(Tokens tokenID) internal pure returns (bool validity) {\n        return tokenID == Tokens.NMR || tokenID == Tokens.DAI;\n    }\n\n    /// @notice ERC20 ransfer.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param to address of the recipient.\n    /// @param value uint256 amount of tokens.\n    function _transfer(Tokens tokenID, address to, uint256 value) internal onlyValidTokenID(tokenID) {\n        require(IERC20(getTokenAddress(tokenID)).transfer(to, value), 'token transfer failed');\n    }\n\n    /// @notice ERC20 TransferFrom\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param from address to spend from.\n    /// @param to address of the recipient.\n    /// @param value uint256 amount of tokens.\n    function _transferFrom(Tokens tokenID, address from, address to, uint256 value) internal onlyValidTokenID(tokenID) {\n        require(IERC20(getTokenAddress(tokenID)).transferFrom(from, to, value), 'token transfer failed');\n    }\n\n    /// @notice ERC20 Burn\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param value uint256 amount of tokens.\n    function _burn(Tokens tokenID, uint256 value) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Tokens.DAI) {\n            BurnDAI._burn(value);\n        } else if (tokenID == Tokens.NMR) {\n            BurnNMR._burn(value);\n        }\n    }\n\n    /// @notice ERC20 BurnFrom\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param from address to burn from.\n    /// @param value uint256 amount of tokens.\n    function _burnFrom(Tokens tokenID, address from, uint256 value) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Tokens.DAI) {\n            BurnDAI._burnFrom(from, value);\n        } else if (tokenID == Tokens.NMR) {\n            BurnNMR._burnFrom(from, value);\n        }\n    }\n\n    /// @notice ERC20 Approve\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param spender address of the spender.\n    /// @param value uint256 amount of tokens.\n    function _approve(Tokens tokenID, address spender, uint256 value) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Tokens.DAI) {\n            require(IERC20(BurnDAI.getTokenAddress()).approve(spender, value), 'token approval failed');\n        } else if (tokenID == Tokens.NMR) {\n            address nmr = BurnNMR.getTokenAddress();\n            uint256 currentAllowance = IERC20(nmr).allowance(msg.sender, spender);\n            require(iNMR(nmr).changeApproval(spender, currentAllowance, value), 'token approval failed');\n        }\n    }\n\n    /// @notice ERC20 TotalSupply\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return value uint256 amount of tokens.\n    function totalSupply(Tokens tokenID) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(getTokenAddress(tokenID)).totalSupply();\n    }\n\n    /// @notice ERC20 BalanceOf\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param who address of the owner.\n    /// @return value uint256 amount of tokens.\n    function balanceOf(Tokens tokenID, address who) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(getTokenAddress(tokenID)).balanceOf(who);\n    }\n\n    /// @notice ERC20 Allowance\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @param owner address of the owner.\n    /// @param spender address of the spender.\n    /// @return value uint256 amount of tokens.\n    function allowance(Tokens tokenID, address owner, address spender) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(getTokenAddress(tokenID)).allowance(owner, spender);\n    }\n}",
		"modules/BurnDAI.sol": "pragma solidity ^0.5.13;\n\nimport \"./BurnNMR.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../helpers/UniswapExchangeInterface.sol\";\n\n/// @title BurnDAI\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @notice This module allows for burning DAI tokens by exchanging them for NMR on uniswap and burning the NMR.\ncontract BurnDAI is BurnNMR {\n\n    // address of the token\n    address private constant _DAIToken = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    // uniswap exchange of the token\n    address private constant _DAIExchange = address(0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667);\n\n    /// @notice Burns a specific amount of DAI from the target address and decrements allowance.\n    /// @dev This implementation has no frontrunning protection.\n    /// @param from address The account whose tokens will be burned.\n    /// @param value uint256 The amount of DAI (18 decimals) to be burned.\n    function _burnFrom(address from, uint256 value) internal {\n\n        // transfer dai to this contract\n        IERC20(_DAIToken).transferFrom(from, address(this), value);\n\n        // butn nmr\n        _burn(value);\n    }\n\n    /// @notice Burns a specific amount of DAI from this contract.\n    /// @dev This implementation has no frontrunning protection.\n    /// @param value uint256 The amount of DAI (18 decimals) to be burned.\n    function _burn(uint256 value) internal {\n\n        // approve uniswap for token transfer\n        IERC20(_DAIToken).approve(_DAIExchange, value);\n\n        // swap dai for nmr\n        uint256 tokens_sold = value;\n        (uint256 min_tokens_bought, uint256 min_eth_bought) = getExpectedSwapAmount(tokens_sold);\n        uint256 deadline = now;\n        uint256 tokens_bought = UniswapExchangeInterface(_DAIExchange).tokenToTokenSwapInput(\n            tokens_sold,\n            min_tokens_bought,\n            min_eth_bought,\n            deadline,\n            BurnNMR.getTokenAddress()\n        );\n\n        // burn nmr\n        BurnNMR._burn(tokens_bought);\n    }\n\n    /// @notice Get the amount of NMR and ETH required to sell a given amount of DAI.\n    /// @param amountDAI uint256 The amount of DAI (18 decimals) to sell.\n    /// @param amountNMR uint256 The amount of NMR (18 decimals) required.\n    /// @param amountETH uint256 The amount of ETH (18 decimals) required.\n    function getExpectedSwapAmount(uint256 amountDAI) internal view returns (uint256 amountNMR, uint256 amountETH) {\n        amountETH = UniswapExchangeInterface(_DAIExchange).getTokenToEthInputPrice(amountDAI);\n        amountNMR = UniswapExchangeInterface(BurnNMR.getExchangeAddress()).getEthToTokenInputPrice(amountETH);\n        return (amountNMR, amountETH);\n    }\n\n    /// @notice Get the DAI token address.\n    /// @return token address The DAI token address.\n    function getTokenAddress() internal pure returns (address token) {\n        token = _DAIToken;\n    }\n\n    /// @notice Get the DAI Uniswap exchange address.\n    /// @return token address The DAI Uniswap exchange address.\n    function getExchangeAddress() internal pure returns (address exchange) {\n        exchange = _DAIExchange;\n    }\n\n}",
		"modules/BurnNMR.sol": "pragma solidity ^0.5.13;\n\nimport \"./iNMR.sol\";\n\n/// @title BurnNMR\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @notice This module simplifies calling NMR burn functions using regular openzeppelin ERC20Burnable interface and revert on failure.\n///         This helper is required given the non-standard implementation of the NMR burn functions: https://github.com/numerai/contract\ncontract BurnNMR {\n\n    // address of the token\n    address private constant _NMRToken = address(0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671);\n    // uniswap exchange of the token\n    address private constant _NMRExchange = address(0x2Bf5A5bA29E60682fC56B2Fcf9cE07Bef4F6196f);\n\n    /// @notice Burns a specific amount of NMR from this contract.\n    /// @param value uint256 The amount of NMR (18 decimals) to be burned.\n    function _burn(uint256 value) internal {\n        require(iNMR(_NMRToken).mint(value), \"nmr burn failed\");\n    }\n\n    /// @notice Burns a specific amount of NMR from the target address and decrements allowance.\n    /// @param from address The account whose tokens will be burned.\n    /// @param value uint256 The amount of NMR (18 decimals) to be burned.\n    function _burnFrom(address from, uint256 value) internal {\n        require(iNMR(_NMRToken).numeraiTransfer(from, value), \"nmr burnFrom failed\");\n    }\n\n    /// @notice Get the NMR token address.\n    /// @return token address The NMR token address.\n    function getTokenAddress() internal pure returns (address token) {\n        token = _NMRToken;\n    }\n\n    /// @notice Get the NMR Uniswap exchange address.\n    /// @return token address The NMR Uniswap exchange address.\n    function getExchangeAddress() internal pure returns (address exchange) {\n        exchange = _NMRExchange;\n    }\n\n}\n",
		"modules/iNMR.sol": "pragma solidity ^0.5.13;\n\n\n/// @title iNMR\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\ncontract iNMR {\n\n    // ERC20\n    function totalSupply() external returns (uint256);\n    function balanceOf(address _owner) external returns (uint256);\n    function allowance(address _owner, address _spender) external returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool ok);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool ok);\n    function approve(address _spender, uint256 _value) external returns (bool ok);\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) external returns (bool ok);\n\n    /// @dev Behavior has changed to match OpenZeppelin's `ERC20Burnable.burn(uint256 amount)`\n    /// @dev Destoys `amount` tokens from `msg.sender`, reducing the total supply.\n    ///\n    /// Emits a `Transfer` event with `to` set to the zero address.\n    /// Requirements:\n    /// - `account` must have at least `amount` tokens.\n    function mint(uint256 _value) external returns (bool ok);\n\n    /// @dev Behavior has changed to match OpenZeppelin's `ERC20Burnable.burnFrom(address account, uint256 amount)`\n    /// @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n    /// from the caller's allowance.\n    ///\n    /// Emits an `Approval` event indicating the updated allowance.\n    /// Emits a `Transfer` event with `to` set to the zero address.\n    ///\n    /// Requirements:\n    /// - `account` must have at least `amount` tokens.\n    /// - `account` must have approved `msg.sender` with allowance of at least `amount` tokens.\n    function numeraiTransfer(address _to, uint256 _value) external returns (bool ok);\n}\n",
		"helpers/UniswapExchangeInterface.sol": "pragma solidity ^0.5.13;\n\n\ncontract UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}",
		"modules/Deposit.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./TokenManager.sol\";\n\n\n/// @title Deposit\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Deposit.png\n/// @notice This module allows for tracking user deposits for fungible tokens.\ncontract Deposit {\n\n    using SafeMath for uint256;\n\n    mapping (uint256 => mapping (address => uint256)) private _deposit;\n\n    event DepositIncreased(TokenManager.Tokens tokenID, address user, uint256 amount, uint256 newDeposit);\n    event DepositDecreased(TokenManager.Tokens tokenID, address user, uint256 amount, uint256 newDeposit);\n\n    /// @notice Increase the deposit of a user.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param user address of the user.\n    /// @param amountToAdd uint256 amount by which to increase the deposit.\n    /// @return newDeposit uint256 amount of the updated deposit.\n    function _increaseDeposit(TokenManager.Tokens tokenID, address user, uint256 amountToAdd) internal returns (uint256 newDeposit) {\n        // calculate new deposit amount\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    /// @notice Decrease the deposit of a user.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param user address of the user.\n    /// @param amountToRemove uint256 amount by which to decrease the deposit.\n    /// @return newDeposit uint256 amount of the updated deposit.\n    function _decreaseDeposit(TokenManager.Tokens tokenID, address user, uint256 amountToRemove) internal returns (uint256 newDeposit) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // check if sufficient deposit\n        require(currentDeposit >= amountToRemove, \"insufficient deposit to remove\");\n\n        // calculate new deposit amount\n        newDeposit = currentDeposit.sub(amountToRemove);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    /// @notice Set the deposit of a user to zero.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param user address of the user.\n    /// @return amountRemoved uint256 amount removed from deposit.\n    function _clearDeposit(TokenManager.Tokens tokenID, address user) internal returns (uint256 amountRemoved) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // remove deposit\n        _decreaseDeposit(tokenID, user, currentDeposit);\n\n        // return\n        return currentDeposit;\n    }\n\n    // view functions\n\n    /// @notice Get the current deposit of a user.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. This ID must be one of the IDs supported by TokenManager.\n    /// @param user address of the user.\n    /// @return deposit uint256 current amount of the deposit.\n    function getDeposit(TokenManager.Tokens tokenID, address user) internal view returns (uint256 deposit) {\n        return _deposit[uint256(tokenID)][user];\n    }\n\n}\n",
		"modules/EventMetadata.sol": "pragma solidity ^0.5.13;\n\n\n/// @title EventMetadata\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @notice This module emits metadata blob as an event.\ncontract EventMetadata {\n\n    event MetadataSet(bytes metadata);\n\n    // state functions\n\n    /// @notice Emit a metadata blob.\n    /// @param metadata data blob of any format.\n    function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n}\n",
		"modules/Operated.sol": "pragma solidity ^0.5.13;\n\n\n/// @title Operated\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\ncontract Operated {\n\n    address private _operator;\n\n    event OperatorUpdated(address operator);\n\n    // state functions\n\n    function _setOperator(address operator) internal {\n\n        // can only be called when operator is null\n        require(_operator == address(0), \"operator already set\");\n\n        // cannot set to address 0\n        require(operator != address(0), \"cannot set operator to address 0\");\n\n        // set operator in storage\n        _operator = operator;\n\n        // emit event\n        emit OperatorUpdated(operator);\n    }\n\n    function _transferOperator(address operator) internal {\n\n        // requires existing operator\n        require(_operator != address(0), \"only when operator set\");\n\n        // cannot set to address 0\n        require(operator != address(0), \"cannot set operator to address 0\");\n\n        // set operator in storage\n        _operator = operator;\n\n        // emit event\n        emit OperatorUpdated(operator);\n    }\n\n    function _renounceOperator() internal {\n\n        // requires existing operator\n        require(_operator != address(0), \"only when operator set\");\n\n        // set operator in storage\n        _operator = address(0);\n\n        // emit event\n        emit OperatorUpdated(address(0));\n    }\n\n    // view functions\n\n    function getOperator() public view returns (address operator) {\n        return _operator;\n    }\n\n    function isOperator(address caller) internal view returns (bool ok) {\n        return caller == _operator;\n    }\n\n}\n",
		"modules/Template.sol": "pragma solidity ^0.5.13;\n\nimport \"./iFactory.sol\";\n\n\n/// @title Template\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @notice This module is imported by all template contracts to implement core functionality associated with the factories.\ncontract Template {\n\n    address private _factory;\n\n    // modifiers\n\n    /// @notice Modifier which only allows to be `DELEGATECALL`ed from within a constructor on initialization of the contract.\n    modifier initializeTemplate() {\n        // set factory\n        _factory = msg.sender;\n\n        // only allow function to be `DELEGATECALL`ed from within a constructor.\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n\n    // view functions\n\n    /// @notice Get the address that created this clone.\n    ///         Note, this cannot be trusted because it is possible to frontrun the create function and become the creator.\n    /// @return creator address that created this clone.\n    function getCreator() public view returns (address creator) {\n        // iFactory(...) would revert if _factory address is not actually a factory contract\n        return iFactory(_factory).getInstanceCreator(address(this));\n    }\n\n    /// @notice Validate if address matches the stored creator.\n    /// @param caller address to validate.\n    /// @return validity bool true if matching address.\n    function isCreator(address caller) internal view returns (bool validity) {\n        return (caller == getCreator());\n    }\n\n    /// @notice Get the address of the factory for this clone.\n    /// @return factory address of the factory.\n    function getFactory() public view returns (address factory) {\n        return _factory;\n    }\n\n}\n",
		"modules/iFactory.sol": "pragma solidity ^0.5.13;\n\n/// @title iFactory\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\ninterface iFactory {\n\n    event InstanceCreated(address indexed instance, address indexed creator, bytes callData);\n\n    function create(bytes calldata callData) external returns (address instance);\n    function createSalty(bytes calldata callData, bytes32 salt) external returns (address instance);\n    function getInitSelector() external view returns (bytes4 initSelector);\n    function getInstanceRegistry() external view returns (address instanceRegistry);\n    function getTemplate() external view returns (address template);\n    function getSaltyInstance(address creator, bytes calldata callData, bytes32 salt) external view returns (address instance, bool validity);\n    function getNextNonceInstance(address creator, bytes calldata callData) external view returns (address instance);\n\n    function getInstanceCreator(address instance) external view returns (address creator);\n    function getInstanceType() external view returns (bytes4 instanceType);\n    function getInstanceCount() external view returns (uint256 count);\n    function getInstance(uint256 index) external view returns (address instance);\n    function getInstances() external view returns (address[] memory instances);\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n}\n",
		"modules/iRegistry.sol": "pragma solidity ^0.5.13;\n\n\n/// @title iRegistry\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\ninterface iRegistry {\n\n    enum FactoryStatus { Unregistered, Registered, Retired }\n\n    event FactoryAdded(address owner, address factory, uint256 factoryID, bytes extraData);\n    event FactoryRetired(address owner, address factory, uint256 factoryID);\n    event InstanceRegistered(address instance, uint256 instanceIndex, address indexed creator, address indexed factory, uint256 indexed factoryID);\n\n    // factory state functions\n\n    function addFactory(address factory, bytes calldata extraData ) external;\n    function retireFactory(address factory) external;\n\n    // factory view functions\n\n    function getFactoryCount() external view returns (uint256 count);\n    function getFactoryStatus(address factory) external view returns (FactoryStatus status);\n    function getFactoryID(address factory) external view returns (uint16 factoryID);\n    function getFactoryData(address factory) external view returns (bytes memory extraData);\n    function getFactoryAddress(uint16 factoryID) external view returns (address factory);\n    function getFactory(address factory) external view returns (FactoryStatus state, uint16 factoryID, bytes memory extraData);\n    function getFactories() external view returns (address[] memory factories);\n    function getPaginatedFactories(uint256 startIndex, uint256 endIndex) external view returns (address[] memory factories);\n\n    // instance state functions\n\n    function register(address instance, address creator, uint80 extraData) external;\n\n    // instance view functions\n\n    function getInstanceType() external view returns (bytes4 instanceType);\n    function getInstanceCount() external view returns (uint256 count);\n    function getInstance(uint256 index) external view returns (address instance);\n    function getInstances() external view returns (address[] memory instances);\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n}\n"
	},
	"sourceTreeHashHex": "0xfbeb77e57fb2927e284bf0ab3f6226b33c23132a99bf8cc7b60874735e8ab3a5",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@openzeppelin/contracts=/Users/kimbui/Documents/Code/erasure-protocol/node_modules/@openzeppelin/contracts"
			]
		}
	},
	"networks": {}
}