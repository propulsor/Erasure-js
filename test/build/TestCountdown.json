{
	"schemaVersion": "2.0.0",
	"contractName": "TestCountdown",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "DeadlineSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "LengthSet",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCountdownStatus",
				"outputs": [
					{
						"internalType": "enum Countdown.CountdownStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDeadline",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDeadlineStatus",
				"outputs": [
					{
						"internalType": "enum Deadline.DeadlineStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTimeRemaining",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "time",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "setDeadline",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "setLength",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "start",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610525806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063be1c766b1161005b578063be1c766b14610133578063be9a655514610151578063dac6270d1461015b578063de2229fe1461017957610088565b8063195199f61461008d57806319fbb48e146100bb5780635f8d96de146100e75780636495a72c14610105575b600080fd5b6100b9600480360360208110156100a357600080fd5b81019080803590602001909291905050506101a5565b005b6100c36101b1565b604051808260038111156100d357fe5b60ff16815260200191505060405180910390f35b6100ef61022a565b6040518082815260200191505060405180910390f35b6101316004803603602081101561011b57600080fd5b8101908080359060200190929190505050610233565b005b61013b61023f565b6040518082815260200191505060405180910390f35b610159610249565b005b610163610254565b6040518082815260200191505060405180910390f35b610181610284565b6040518082600281111561019157fe5b60ff16815260200191505060405180910390f35b6101ae816102b4565b50565b60008060015414156101c65760009050610227565b600060028111156101d357fe5b6101db610284565b60028111156101e657fe5b14156101f55760019050610227565b60028081111561020157fe5b610209610284565b600281111561021457fe5b146102225760029050610227565b600390505b90565b60008054905090565b61023c816102f5565b50565b6000600154905090565b610251610336565b50565b600042600054111561027c576102754260005461035e90919063ffffffff16565b9050610281565b600090505b90565b600080600054141561029957600090506102b1565b4260005411156102ac57600190506102b1565b600290505b90565b806000819055507f337b880688eb06df8adb77036a6c8def1da2b520bc901c04b3a5a23f9ae13039816040518082815260200191505060405180910390a150565b806001819055507f7caceb1091bbaa84d09ab116a1fd72387eaab8a33d70fc39168b9b75686ee32c816040518082815260200191505060405180910390a150565b600061034d426001546103a890919063ffffffff16565b9050610358816102b4565b80905090565b60006103a083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610430565b905092915050565b600080828401905083811015610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008383111582906104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104a2578082015181840152602081019050610487565b50505050905090810190601f1680156104cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fea265627a7a72315820831cded3b410cbf28bf7877f4fa285b263e1e0b044a1166754d198f72187cb6364736f6c634300050d0032",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x525 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBE1C766B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xBE1C766B EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0xBE9A6555 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0xDAC6270D EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xDE2229FE EQ PUSH2 0x179 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x195199F6 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x19FBB48E EQ PUSH2 0xBB JUMPI DUP1 PUSH4 0x5F8D96DE EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x6495A72C EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC3 PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD3 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x22A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x233 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13B PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x249 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x163 PUSH2 0x254 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH2 0x284 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x191 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE DUP2 PUSH2 0x2B4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x227 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1D3 JUMPI INVALID JUMPDEST PUSH2 0x1DB PUSH2 0x284 JUMP JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1E6 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x227 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x201 JUMPI INVALID JUMPDEST PUSH2 0x209 PUSH2 0x284 JUMP JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x214 JUMPI INVALID JUMPDEST EQ PUSH2 0x222 JUMPI PUSH1 0x2 SWAP1 POP PUSH2 0x227 JUMP JUMPDEST PUSH1 0x3 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x23C DUP2 PUSH2 0x2F5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x336 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x0 SLOAD GT ISZERO PUSH2 0x27C JUMPI PUSH2 0x275 TIMESTAMP PUSH1 0x0 SLOAD PUSH2 0x35E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x281 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2B1 JUMP JUMPDEST TIMESTAMP PUSH1 0x0 SLOAD GT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x2B1 JUMP JUMPDEST PUSH1 0x2 SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH32 0x337B880688EB06DF8ADB77036A6C8DEF1DA2B520BC901C04B3A5A23F9AE13039 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH32 0x7CACEB1091BBAA84D09AB116A1FD72387EAAB8A33D70FC39168B9B75686EE32C DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34D TIMESTAMP PUSH1 0x1 SLOAD PUSH2 0x3A8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x358 DUP2 PUSH2 0x2B4 JUMP JUMPDEST DUP1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x430 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x487 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4CF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP4 SHR 0xDE 0xD3 0xB4 LT 0xCB CALLCODE DUP12 0xF7 DUP8 PUSH32 0x4FA285B263E1E0B044A1166754D198F72187CB6364736F6C634300050D003200 ",
				"sourceMap": "62:297:44:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;62:297:44;;;;;;;"
			}
		}
	},
	"sources": {
		"test-contracts/TestCountdown.sol": {
			"id": 44
		},
		"modules/Countdown.sol": {
			"id": 11
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 52
		},
		"modules/Deadline.sol": {
			"id": 12
		}
	},
	"sourceCodes": {
		"test-contracts/TestCountdown.sol": "pragma solidity ^0.5.13;\n\nimport \"../modules/Countdown.sol\";\n\ncontract TestCountdown is Countdown {\n\n    function setDeadline(uint256 deadline) public {\n        Deadline._setDeadline(deadline);\n    }\n\n    function setLength(uint256 length) public {\n        Countdown._setLength(length);\n    }\n\n    function start() public {\n        Countdown._start();\n    }\n}\n",
		"modules/Countdown.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Deadline.sol\";\n\n\n/// @title Countdown\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Countdown.png\n/// @notice This module provides an arbitrary length countdown.\n///         The countdown makes use of block timestamps to determine start time and end time.\ncontract Countdown is Deadline {\n\n    using SafeMath for uint256;\n\n    uint256 private _length;\n\n    event LengthSet(uint256 length);\n\n    // state functions\n\n    /// @notice Set the length of the countdown\n    /// @param length uint256 The amount of time in seconds.\n    function _setLength(uint256 length) internal {\n        _length = length;\n        emit LengthSet(length);\n    }\n\n    /// @notice Start the countdown based on the current block timestamp\n    /// @return deadline uint256 Unix timestamp of the end of the countdown (current timestamp + countdown length).\n    function _start() internal returns (uint256 deadline) {\n        deadline = _length.add(now);\n        Deadline._setDeadline(deadline);\n        return deadline;\n    }\n\n    // view functions\n\n    /// @notice Get the length of the countdown in seconds\n    /// @return length uint256 The amount of time in seconds.\n    function getLength() public view returns (uint256 length) {\n        return _length;\n    }\n\n    enum CountdownStatus { isNull, isSet, isActive, isOver }\n    /// @notice Get the status of the state machine\n    /// @return status CountdownStatus from the following states:\n    ///         - isNull: the length has not been set\n    ///         - isSet: the length is set, but the countdown is not started\n    ///         - isActive: the countdown has started but not yet ended\n    ///         - isOver: the countdown has completed\n    function getCountdownStatus() public view returns (CountdownStatus status) {\n        if (_length == 0)\n            return CountdownStatus.isNull;\n        if (Deadline.getDeadlineStatus() == DeadlineStatus.isNull)\n            return CountdownStatus.isSet;\n        if (Deadline.getDeadlineStatus() != DeadlineStatus.isOver)\n            return CountdownStatus.isActive;\n        else\n            return CountdownStatus.isOver;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isNull state\n    /// @return validity bool true if correct state\n    function isNull() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isNull;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isSet state\n    /// @return validity bool true if correct state\n    function isSet() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isSet;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isActive state\n    /// @return validity bool true if correct state\n    function isActive() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isActive;\n    }\n\n    /// @notice Validate if the state machine is in the CountdownStatus.isOver state\n    /// @return validity bool true if correct state\n    function isOver() internal view returns (bool validity) {\n        return getCountdownStatus() == CountdownStatus.isOver;\n    }\n\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"modules/Deadline.sol": "pragma solidity ^0.5.13;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n\n/// @title Deadline\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/modules/Deadline.png\n/// @notice This module allows for setting and validating a deadline.\n///         The deadline makes use of block timestamps to determine end time.\ncontract Deadline {\n\n    using SafeMath for uint256;\n\n    uint256 private _deadline;\n\n    event DeadlineSet(uint256 deadline);\n\n    // state functions\n\n    /// @notice Set the deadline\n    /// @param deadline uint256 Unix timestamp to use as deadline.\n    function _setDeadline(uint256 deadline) internal {\n        _deadline = deadline;\n        emit DeadlineSet(deadline);\n    }\n\n    // view functions\n\n    /// @notice Get the timestamp of the deadline\n    /// @return deadline uint256 Unix timestamp of the deadline.\n    function getDeadline() public view returns (uint256 deadline) {\n        return _deadline;\n    }\n\n    // timeRemaining will default to 0 if _setDeadline is not called\n    // if the now exceeds deadline, just return 0 as the timeRemaining\n\n    /// @notice Get the amount of time remaining until the deadline.\n    ///         Returns 0 if deadline is not set or is passed.\n    /// @return time uint256 Amount of time in seconds until deadline.\n    function getTimeRemaining() public view returns (uint256 time) {\n        if (_deadline > now)\n            return _deadline.sub(now);\n        else\n            return 0;\n    }\n\n    enum DeadlineStatus { isNull, isSet, isOver }\n    /// @notice Get the status of the state machine\n    /// @return status DeadlineStatus from the following states:\n    ///         - isNull: the deadline has not been set\n    ///         - isSet: the deadline is set, but has not passed\n    ///         - isOver: the deadline has passed\n    function getDeadlineStatus() public view returns (DeadlineStatus status) {\n        if (_deadline == 0)\n            return DeadlineStatus.isNull;\n        if (_deadline > now)\n            return DeadlineStatus.isSet;\n        else\n            return DeadlineStatus.isOver;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isNull state\n    /// @return validity bool true if correct state\n    function isNull() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isNull;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isSet state\n    /// @return validity bool true if correct state\n    function isSet() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isSet;\n    }\n\n    /// @notice Validate if the state machine is in the DeadlineStatus.isOver state\n    /// @return validity bool true if correct state\n    function isOver() internal view returns (bool status) {\n        return getDeadlineStatus() == DeadlineStatus.isOver;\n    }\n\n}\n"
	},
	"sourceTreeHashHex": "0x99f3fa7f6ac6eaf6d4455708e409b80ccb3b96ca22af0a71fffe17c4ffc8469f",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.13+commit.5b0b510c.js",
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@openzeppelin/contracts=/Users/kimbui/Documents/Code/erasure-protocol/node_modules/@openzeppelin/contracts"
			]
		}
	},
	"networks": {}
}